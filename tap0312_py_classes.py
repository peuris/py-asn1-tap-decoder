# Auto-generated by asn1ate on 2016-05-24 13:10:53.191315
from pyasn1.type import univ, char, namedtype, namedval, tag, constraint, useful


class AsciiString(univ.OctetString):
    pass


class TransactionDetailDescription(AsciiString):
    pass


TransactionDetailDescription.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 339))


class DataVolume(univ.Integer):
    pass


class DataVolumeIncoming(DataVolume):
    pass


DataVolumeIncoming.tagSet = DataVolume.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 250))


class Currency(univ.OctetString):
    pass


class AdvisedChargeCurrency(Currency):
    pass


AdvisedChargeCurrency.tagSet = Currency.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 348))


class PaymentMethod(univ.Integer):
    pass


PaymentMethod.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 347))


class AbsoluteAmount(univ.Integer):
    pass


class Charge(AbsoluteAmount):
    pass


Charge.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 62))


class Commission(Charge):
    pass


Commission.tagSet = Charge.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 350))


class PaidIndicator(univ.Integer):
    pass


PaidIndicator.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 346))


class AdvisedCharge(Charge):
    pass


AdvisedCharge.tagSet = Charge.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 349))


class AdvisedChargeInformation(univ.Sequence):
    pass


AdvisedChargeInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 351))
AdvisedChargeInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('paidIndicator', PaidIndicator()),
    namedtype.OptionalNamedType('paymentMethod', PaymentMethod()),
    namedtype.OptionalNamedType('advisedChargeCurrency', AdvisedChargeCurrency()),
    namedtype.OptionalNamedType('advisedCharge', AdvisedCharge()),
    namedtype.OptionalNamedType('commission', Commission())
)


class TotalDataVolume(DataVolume):
    pass


TotalDataVolume.tagSet = DataVolume.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 343))


class TransactionIdentifier(AsciiString):
    pass


TransactionIdentifier.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 341))


class TransactionShortDescription(AsciiString):
    pass


TransactionShortDescription.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 340))


class ContentChargingPoint(univ.Integer):
    pass


ContentChargingPoint.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 345))


class ChargeRefundIndicator(univ.Integer):
    pass


ChargeRefundIndicator.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 344))


class DataVolumeOutgoing(DataVolume):
    pass


DataVolumeOutgoing.tagSet = DataVolume.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 251))


class ChargedUnits(univ.Integer):
    pass


ChargedUnits.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 68))


class Code(univ.Integer):
    pass


class UtcTimeOffsetCode(Code):
    pass


UtcTimeOffsetCode.tagSet = Code.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 232))


class NumberString(univ.OctetString):
    pass


class LocalTimeStamp(NumberString):
    pass


LocalTimeStamp.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 16))


class DateTime(univ.Sequence):
    pass


DateTime.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('localTimeStamp', LocalTimeStamp()),
    namedtype.OptionalNamedType('utcTimeOffsetCode', UtcTimeOffsetCode())
)


class ChargingTimeStamp(DateTime):
    pass


ChargingTimeStamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 74))


class ChargeDetailTimeStamp(ChargingTimeStamp):
    pass


ChargeDetailTimeStamp.tagSet = ChargingTimeStamp.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 410))


class ChargeableUnits(univ.Integer):
    pass


ChargeableUnits.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 65))


class ChargeType(NumberString):
    pass


ChargeType.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 71))


class ChargeDetail(univ.Sequence):
    pass


ChargeDetail.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 63))
ChargeDetail.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('chargeType', ChargeType()),
    namedtype.OptionalNamedType('charge', Charge()),
    namedtype.OptionalNamedType('chargeableUnits', ChargeableUnits()),
    namedtype.OptionalNamedType('chargedUnits', ChargedUnits()),
    namedtype.OptionalNamedType('chargeDetailTimeStamp', ChargeDetailTimeStamp())
)


class ChargeDetailList(univ.SequenceOf):
    pass


ChargeDetailList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 64))
ChargeDetailList.componentType = ChargeDetail()


class CallTypeLevel1(univ.Integer):
    pass


CallTypeLevel1.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 259))


class CallTypeLevel2(univ.Integer):
    pass


CallTypeLevel2.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 255))


class CallTypeLevel3(univ.Integer):
    pass


CallTypeLevel3.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 256))


class CallTypeGroup(univ.Sequence):
    pass


CallTypeGroup.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 258))
CallTypeGroup.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('callTypeLevel1', CallTypeLevel1()),
    namedtype.OptionalNamedType('callTypeLevel2', CallTypeLevel2()),
    namedtype.OptionalNamedType('callTypeLevel3', CallTypeLevel3())
)


class ChargedItem(AsciiString):
    pass


ChargedItem.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 66))


class TaxCode(univ.Integer):
    pass


TaxCode.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 212))


class TaxableAmount(AbsoluteAmount):
    pass


TaxableAmount.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 398))


class TaxValue(AbsoluteAmount):
    pass


TaxValue.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 397))


class TaxInformation(univ.Sequence):
    pass


TaxInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 213))
TaxInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('taxCode', TaxCode()),
    namedtype.OptionalNamedType('taxValue', TaxValue()),
    namedtype.OptionalNamedType('taxableAmount', TaxableAmount())
)


class TaxInformationList(univ.SequenceOf):
    pass


TaxInformationList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 214))
TaxInformationList.componentType = TaxInformation()


class DiscountValue(AbsoluteAmount):
    pass


class Discount(DiscountValue):
    pass


Discount.tagSet = DiscountValue.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 412))


class DiscountCode(univ.Integer):
    pass


DiscountCode.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 91))


class DiscountableAmount(AbsoluteAmount):
    pass


DiscountableAmount.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 423))


class DiscountInformation(univ.Sequence):
    pass


DiscountInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 96))
DiscountInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('discountCode', DiscountCode()),
    namedtype.OptionalNamedType('discount', Discount()),
    namedtype.OptionalNamedType('discountableAmount', DiscountableAmount())
)


class ExchangeRateCode(Code):
    pass


ExchangeRateCode.tagSet = Code.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 105))


class ChargeInformation(univ.Sequence):
    pass


ChargeInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 69))
ChargeInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('chargedItem', ChargedItem()),
    namedtype.OptionalNamedType('exchangeRateCode', ExchangeRateCode()),
    namedtype.OptionalNamedType('callTypeGroup', CallTypeGroup()),
    namedtype.OptionalNamedType('chargeDetailList', ChargeDetailList()),
    namedtype.OptionalNamedType('taxInformation', TaxInformationList()),
    namedtype.OptionalNamedType('discountInformation', DiscountInformation())
)


class ChargeInformationList(univ.SequenceOf):
    pass


ChargeInformationList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 70))
ChargeInformationList.componentType = ChargeInformation()


class ContentTransactionCode(univ.Integer):
    pass


ContentTransactionCode.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 336))


class TransactionAuthCode(AsciiString):
    pass


TransactionAuthCode.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 342))


class ContentTransactionType(univ.Integer):
    pass


ContentTransactionType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 337))


class TransactionDescriptionSupp(univ.Integer):
    pass


TransactionDescriptionSupp.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 338))


class ObjectType(univ.Integer):
    pass


ObjectType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 281))


class ContentServiceUsed(univ.Sequence):
    pass


ContentServiceUsed.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 352))
ContentServiceUsed.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('contentTransactionCode', ContentTransactionCode()),
    namedtype.OptionalNamedType('contentTransactionType', ContentTransactionType()),
    namedtype.OptionalNamedType('objectType', ObjectType()),
    namedtype.OptionalNamedType('transactionDescriptionSupp', TransactionDescriptionSupp()),
    namedtype.OptionalNamedType('transactionShortDescription', TransactionShortDescription()),
    namedtype.OptionalNamedType('transactionDetailDescription', TransactionDetailDescription()),
    namedtype.OptionalNamedType('transactionIdentifier', TransactionIdentifier()),
    namedtype.OptionalNamedType('transactionAuthCode', TransactionAuthCode()),
    namedtype.OptionalNamedType('dataVolumeIncoming', DataVolumeIncoming()),
    namedtype.OptionalNamedType('dataVolumeOutgoing', DataVolumeOutgoing()),
    namedtype.OptionalNamedType('totalDataVolume', TotalDataVolume()),
    namedtype.OptionalNamedType('chargeRefundIndicator', ChargeRefundIndicator()),
    namedtype.OptionalNamedType('contentChargingPoint', ContentChargingPoint()),
    namedtype.OptionalNamedType('chargeInformationList', ChargeInformationList()),
    namedtype.OptionalNamedType('advisedChargeInformation', AdvisedChargeInformation())
)


class OperatorSpecInformation(AsciiString):
    pass


OperatorSpecInformation.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 163))


class FileTypeIndicator(AsciiString):
    pass


FileTypeIndicator.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 110))


class TaxRate(NumberString):
    pass


TaxRate.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 215))


class UtcTimeOffset(AsciiString):
    pass


UtcTimeOffset.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 231))


class DateTimeLong(univ.Sequence):
    pass


DateTimeLong.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('localTimeStamp', LocalTimeStamp()),
    namedtype.OptionalNamedType('utcTimeOffset', UtcTimeOffset())
)


class FileAvailableTimeStamp(DateTimeLong):
    pass


FileAvailableTimeStamp.tagSet = DateTimeLong.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 107))


class BCDString(univ.OctetString):
    pass


class Msisdn(BCDString):
    pass


Msisdn.tagSet = BCDString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 152))


class Imsi(BCDString):
    pass


Imsi.tagSet = BCDString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 129))


class GsmChargeableSubscriber(univ.Sequence):
    pass


GsmChargeableSubscriber.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 286))
GsmChargeableSubscriber.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('imsi', Imsi()),
    namedtype.OptionalNamedType('msisdn', Msisdn())
)


class Mdn(NumberString):
    pass


Mdn.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 253))


class Min(NumberString):
    pass


Min.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 146))


class MinChargeableSubscriber(univ.Sequence):
    pass


MinChargeableSubscriber.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 254))
MinChargeableSubscriber.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('min', Min()),
    namedtype.OptionalNamedType('mdn', Mdn())
)


class ScuChargeableSubscriber(univ.Choice):
    pass


ScuChargeableSubscriber.tagSet = univ.Choice.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 430))
ScuChargeableSubscriber.componentType = namedtype.NamedTypes(
    namedtype.NamedType('gsmChargeableSubscriber', GsmChargeableSubscriber()),
    namedtype.NamedType('minChargeableSubscriber', MinChargeableSubscriber())
)


class HomeIdentifier(AsciiString):
    pass


HomeIdentifier.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 288))


class HomeIdType(univ.Integer):
    pass


HomeIdType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 311))


class TrackingCustomerHomeId(univ.Sequence):
    pass


TrackingCustomerHomeId.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 366))
TrackingCustomerHomeId.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('homeIdType', HomeIdType()),
    namedtype.OptionalNamedType('homeIdentifier', HomeIdentifier())
)


class TrackingCustomerHomeIdList(univ.SequenceOf):
    pass


TrackingCustomerHomeIdList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 365))
TrackingCustomerHomeIdList.componentType = TrackingCustomerHomeId()


class UtcTimeOffsetInfo(univ.Sequence):
    pass


UtcTimeOffsetInfo.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 233))
UtcTimeOffsetInfo.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('utcTimeOffsetCode', UtcTimeOffsetCode()),
    namedtype.OptionalNamedType('utcTimeOffset', UtcTimeOffset())
)


class AddressStringDigits(BCDString):
    pass


class CamelDestinationNumber(AddressStringDigits):
    pass


CamelDestinationNumber.tagSet = AddressStringDigits.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 404))


class LocationIdType(univ.Integer):
    pass


LocationIdType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 315))


class NonChargedPartyNumber(AddressStringDigits):
    pass


NonChargedPartyNumber.tagSet = AddressStringDigits.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 444))


class ContentProviderIdentifier(AsciiString):
    pass


ContentProviderIdentifier.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 292))


class ContentProviderIdType(univ.Integer):
    pass


ContentProviderIdType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 291))


class LCSSPIdentification(univ.Sequence):
    pass


LCSSPIdentification.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 375))
LCSSPIdentification.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('contentProviderIdType', ContentProviderIdType()),
    namedtype.OptionalNamedType('contentProviderIdentifier', ContentProviderIdentifier())
)


class LCSSPIdentificationList(univ.SequenceOf):
    pass


LCSSPIdentificationList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 374))
LCSSPIdentificationList.componentType = LCSSPIdentification()


class NetworkIdType(univ.Integer):
    pass


NetworkIdType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 331))


class NetworkIdentifier(AsciiString):
    pass


NetworkIdentifier.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 295))


class Network(univ.Sequence):
    pass


Network.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 332))
Network.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('networkIdType', NetworkIdType()),
    namedtype.OptionalNamedType('networkIdentifier', NetworkIdentifier())
)


class NetworkList(univ.SequenceOf):
    pass


NetworkList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 333))
NetworkList.componentType = Network()


class IspIdentifier(AsciiString):
    pass


IspIdentifier.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 294))


class IspIdType(univ.Integer):
    pass


IspIdType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 293))


class InternetServiceProvider(univ.Sequence):
    pass


InternetServiceProvider.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 329))
InternetServiceProvider.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('ispIdType', IspIdType()),
    namedtype.OptionalNamedType('ispIdentifier', IspIdentifier())
)


class ISPList(univ.SequenceOf):
    pass


ISPList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 378))
ISPList.componentType = InternetServiceProvider()


class LCSSPInformation(univ.Sequence):
    pass


LCSSPInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 373))
LCSSPInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('lCSSPIdentificationList', LCSSPIdentificationList()),
    namedtype.OptionalNamedType('iSPList', ISPList()),
    namedtype.OptionalNamedType('networkList', NetworkList())
)


class EquipmentIdType(univ.Integer):
    pass


EquipmentIdType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 322))


class EquipmentId(AsciiString):
    pass


EquipmentId.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 290))


class TrackingCustomerEquipment(univ.Sequence):
    pass


TrackingCustomerEquipment.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 371))
TrackingCustomerEquipment.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('equipmentIdType', EquipmentIdType()),
    namedtype.OptionalNamedType('equipmentId', EquipmentId())
)


class LocationIdentifier(AsciiString):
    pass


LocationIdentifier.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 289))


class TrackingCustomerLocation(univ.Sequence):
    pass


TrackingCustomerLocation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 369))
TrackingCustomerLocation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('locationIdType', LocationIdType()),
    namedtype.OptionalNamedType('locationIdentifier', LocationIdentifier())
)


class TrackingCustomerLocList(univ.SequenceOf):
    pass


TrackingCustomerLocList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 368))
TrackingCustomerLocList.componentType = TrackingCustomerLocation()


class CustomerIdType(univ.Integer):
    pass


CustomerIdType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 363))


class CustomerIdentifier(AsciiString):
    pass


CustomerIdentifier.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 364))


class TrackingCustomerIdentification(univ.Sequence):
    pass


TrackingCustomerIdentification.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 362))
TrackingCustomerIdentification.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('customerIdType', CustomerIdType()),
    namedtype.OptionalNamedType('customerIdentifier', CustomerIdentifier())
)


class TrackingCustomerIdList(univ.SequenceOf):
    pass


TrackingCustomerIdList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 299))
TrackingCustomerIdList.componentType = TrackingCustomerIdentification()


class TrackingCustomerInformation(univ.Sequence):
    pass


TrackingCustomerInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 298))
TrackingCustomerInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('trackingCustomerIdList', TrackingCustomerIdList()),
    namedtype.OptionalNamedType('trackingCustomerHomeIdList', TrackingCustomerHomeIdList()),
    namedtype.OptionalNamedType('trackingCustomerLocList', TrackingCustomerLocList()),
    namedtype.OptionalNamedType('trackingCustomerEquipment', TrackingCustomerEquipment())
)


class RecEntityCode(Code):
    pass


RecEntityCode.tagSet = Code.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 184))


class CallReference(univ.OctetString):
    pass


CallReference.tagSet = univ.OctetString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 45))


class TrackingPeriod(univ.Integer):
    pass


TrackingPeriod.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 388))


class ResponseTimeCategory(univ.Integer):
    pass


ResponseTimeCategory.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 387))


class HorizontalAccuracyRequested(univ.Integer):
    pass


HorizontalAccuracyRequested.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 385))


class LCSRequestTimestamp(DateTime):
    pass


LCSRequestTimestamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 384))


class VerticalAccuracyRequested(univ.Integer):
    pass


VerticalAccuracyRequested.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 386))


class TrackingFrequency(univ.Integer):
    pass


TrackingFrequency.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 389))


class LCSQosRequested(univ.Sequence):
    pass


LCSQosRequested.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 383))
LCSQosRequested.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('lCSRequestTimestamp', LCSRequestTimestamp()),
    namedtype.OptionalNamedType('horizontalAccuracyRequested', HorizontalAccuracyRequested()),
    namedtype.OptionalNamedType('verticalAccuracyRequested', VerticalAccuracyRequested()),
    namedtype.OptionalNamedType('responseTimeCategory', ResponseTimeCategory()),
    namedtype.OptionalNamedType('trackingPeriod', TrackingPeriod()),
    namedtype.OptionalNamedType('trackingFrequency', TrackingFrequency())
)


class PositioningMethod(univ.Integer):
    pass


PositioningMethod.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 395))


class AgeOfLocation(univ.Integer):
    pass


AgeOfLocation.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 396))


class LCSTransactionStatus(univ.Integer):
    pass


LCSTransactionStatus.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 391))


class HorizontalAccuracyDelivered(univ.Integer):
    pass


HorizontalAccuracyDelivered.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 392))


class ResponseTime(univ.Integer):
    pass


ResponseTime.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 394))


class VerticalAccuracyDelivered(univ.Integer):
    pass


VerticalAccuracyDelivered.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 393))


class LCSQosDelivered(univ.Sequence):
    pass


LCSQosDelivered.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 390))
LCSQosDelivered.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('lCSTransactionStatus', LCSTransactionStatus()),
    namedtype.OptionalNamedType('horizontalAccuracyDelivered', HorizontalAccuracyDelivered()),
    namedtype.OptionalNamedType('verticalAccuracyDelivered', VerticalAccuracyDelivered()),
    namedtype.OptionalNamedType('responseTime', ResponseTime()),
    namedtype.OptionalNamedType('positioningMethod', PositioningMethod()),
    namedtype.OptionalNamedType('trackingPeriod', TrackingPeriod()),
    namedtype.OptionalNamedType('trackingFrequency', TrackingFrequency()),
    namedtype.OptionalNamedType('ageOfLocation', AgeOfLocation())
)


class LocationServiceUsage(univ.Sequence):
    pass


LocationServiceUsage.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 382))
LocationServiceUsage.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('lCSQosRequested', LCSQosRequested()),
    namedtype.OptionalNamedType('lCSQosDelivered', LCSQosDelivered()),
    namedtype.OptionalNamedType('chargingTimeStamp', ChargingTimeStamp()),
    namedtype.OptionalNamedType('chargeInformationList', ChargeInformationList())
)


class OperatorSpecInfoList(univ.SequenceOf):
    pass


OperatorSpecInfoList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 162))
OperatorSpecInfoList.componentType = OperatorSpecInformation()


class TrackedCustomerEquipment(univ.Sequence):
    pass


TrackedCustomerEquipment.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 381))
TrackedCustomerEquipment.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('equipmentIdType', EquipmentIdType()),
    namedtype.OptionalNamedType('equipmentId', EquipmentId())
)


class TrackedCustomerIdentification(univ.Sequence):
    pass


TrackedCustomerIdentification.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 372))
TrackedCustomerIdentification.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('customerIdType', CustomerIdType()),
    namedtype.OptionalNamedType('customerIdentifier', CustomerIdentifier())
)


class TrackedCustomerIdList(univ.SequenceOf):
    pass


TrackedCustomerIdList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 370))
TrackedCustomerIdList.componentType = TrackedCustomerIdentification()


class TrackedCustomerHomeId(univ.Sequence):
    pass


TrackedCustomerHomeId.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 377))
TrackedCustomerHomeId.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('homeIdType', HomeIdType()),
    namedtype.OptionalNamedType('homeIdentifier', HomeIdentifier())
)


class TrackedCustomerHomeIdList(univ.SequenceOf):
    pass


TrackedCustomerHomeIdList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 376))
TrackedCustomerHomeIdList.componentType = TrackedCustomerHomeId()


class TrackedCustomerLocation(univ.Sequence):
    pass


TrackedCustomerLocation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 380))
TrackedCustomerLocation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('locationIdType', LocationIdType()),
    namedtype.OptionalNamedType('locationIdentifier', LocationIdentifier())
)


class TrackedCustomerLocList(univ.SequenceOf):
    pass


TrackedCustomerLocList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 379))
TrackedCustomerLocList.componentType = TrackedCustomerLocation()


class TrackedCustomerInformation(univ.Sequence):
    pass


TrackedCustomerInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 367))
TrackedCustomerInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('trackedCustomerIdList', TrackedCustomerIdList()),
    namedtype.OptionalNamedType('trackedCustomerHomeIdList', TrackedCustomerHomeIdList()),
    namedtype.OptionalNamedType('trackedCustomerLocList', TrackedCustomerLocList()),
    namedtype.OptionalNamedType('trackedCustomerEquipment', TrackedCustomerEquipment())
)


class FileSequenceNumber(NumberString):
    pass


FileSequenceNumber.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 109))


class RapFileSequenceNumber(FileSequenceNumber):
    pass


RapFileSequenceNumber.tagSet = FileSequenceNumber.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 181))


class LocationService(univ.Sequence):
    pass


LocationService.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 297))
LocationService.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('recEntityCode', RecEntityCode()),
    namedtype.OptionalNamedType('callReference', CallReference()),
    namedtype.OptionalNamedType('trackingCustomerInformation', TrackingCustomerInformation()),
    namedtype.OptionalNamedType('lCSSPInformation', LCSSPInformation()),
    namedtype.OptionalNamedType('trackedCustomerInformation', TrackedCustomerInformation()),
    namedtype.OptionalNamedType('locationServiceUsage', LocationServiceUsage()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class SimChargeableSubscriber(univ.Sequence):
    pass


SimChargeableSubscriber.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 199))
SimChargeableSubscriber.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('imsi', Imsi()),
    namedtype.OptionalNamedType('msisdn', Msisdn())
)


class ChargeableSubscriber(univ.Choice):
    pass


ChargeableSubscriber.tagSet = univ.Choice.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 427))
ChargeableSubscriber.componentType = namedtype.NamedTypes(
    namedtype.NamedType('simChargeableSubscriber', SimChargeableSubscriber()),
    namedtype.NamedType('minChargeableSubscriber', MinChargeableSubscriber())
)


class NetworkAccessIdentifier(AsciiString):
    pass


NetworkAccessIdentifier.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 417))


class PacketDataProtocolAddress(AsciiString):
    pass


PacketDataProtocolAddress.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 165))


class PdpAddress(PacketDataProtocolAddress):
    pass


PdpAddress.tagSet = PacketDataProtocolAddress.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 167))


class GprsChargeableSubscriber(univ.Sequence):
    pass


GprsChargeableSubscriber.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 115))
GprsChargeableSubscriber.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('chargeableSubscriber', ChargeableSubscriber()),
    namedtype.OptionalNamedType('pdpAddress', PdpAddress()),
    namedtype.OptionalNamedType('networkAccessIdentifier', NetworkAccessIdentifier())
)


class TotalCallEventDuration(univ.Integer):
    pass


TotalCallEventDuration.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 223))


class CauseForTerm(univ.Integer):
    pass


CauseForTerm.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 58))


class CallEventStartTimeStamp(DateTime):
    pass


CallEventStartTimeStamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 44))


class ChargingId(univ.Integer):
    pass


ChargingId.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 72))


class PDPContextStartTimestamp(DateTime):
    pass


PDPContextStartTimestamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 260))


class PartialTypeIndicator(AsciiString):
    pass


PartialTypeIndicator.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 166))


class NetworkInitPDPContext(univ.Integer):
    pass


NetworkInitPDPContext.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 245))


class AccessPointNameOI(AsciiString):
    pass


AccessPointNameOI.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 262))


class AccessPointNameNI(AsciiString):
    pass


AccessPointNameNI.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 261))


class GprsDestination(univ.Sequence):
    pass


GprsDestination.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 116))
GprsDestination.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('accessPointNameNI', AccessPointNameNI()),
    namedtype.OptionalNamedType('accessPointNameOI', AccessPointNameOI())
)


class GprsBasicCallInformation(univ.Sequence):
    pass


GprsBasicCallInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 114))
GprsBasicCallInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('gprsChargeableSubscriber', GprsChargeableSubscriber()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('gprsDestination', GprsDestination()),
    namedtype.OptionalNamedType('callEventStartTimeStamp', CallEventStartTimeStamp()),
    namedtype.OptionalNamedType('totalCallEventDuration', TotalCallEventDuration()),
    namedtype.OptionalNamedType('causeForTerm', CauseForTerm()),
    namedtype.OptionalNamedType('partialTypeIndicator', PartialTypeIndicator()),
    namedtype.OptionalNamedType('pDPContextStartTimestamp', PDPContextStartTimestamp()),
    namedtype.OptionalNamedType('networkInitPDPContext', NetworkInitPDPContext()),
    namedtype.OptionalNamedType('chargingId', ChargingId())
)


class SessionChargeInformation(univ.Sequence):
    pass


SessionChargeInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 449))
SessionChargeInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('chargedItem', ChargedItem()),
    namedtype.OptionalNamedType('exchangeRateCode', ExchangeRateCode()),
    namedtype.OptionalNamedType('callTypeGroup', CallTypeGroup()),
    namedtype.OptionalNamedType('chargeDetail', ChargeDetail()),
    namedtype.OptionalNamedType('chargeDetailList', ChargeDetailList()),
    namedtype.OptionalNamedType('taxInformationList', TaxInformationList())
)


class HexString(univ.OctetString):
    pass


class CamelInvocationFee(AbsoluteAmount):
    pass


CamelInvocationFee.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 422))


class TotalTransactionDuration(TotalCallEventDuration):
    pass


TotalTransactionDuration.tagSet = TotalCallEventDuration.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 416))


class RequestedDeliveryTimeStamp(DateTime):
    pass


RequestedDeliveryTimeStamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 301))


class ActualDeliveryTimeStamp(DateTime):
    pass


ActualDeliveryTimeStamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 302))


class OrderPlacedTimeStamp(DateTime):
    pass


OrderPlacedTimeStamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 300))


class TransactionStatus(univ.Integer):
    pass


TransactionStatus.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 303))


class ContentTransactionBasicInfo(univ.Sequence):
    pass


ContentTransactionBasicInfo.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 304))
ContentTransactionBasicInfo.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('orderPlacedTimeStamp', OrderPlacedTimeStamp()),
    namedtype.OptionalNamedType('requestedDeliveryTimeStamp', RequestedDeliveryTimeStamp()),
    namedtype.OptionalNamedType('actualDeliveryTimeStamp', ActualDeliveryTimeStamp()),
    namedtype.OptionalNamedType('totalTransactionDuration', TotalTransactionDuration()),
    namedtype.OptionalNamedType('transactionStatus', TransactionStatus())
)


class PlmnId(AsciiString):
    pass


PlmnId.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 169))


class TransparencyIndicator(univ.Integer):
    pass


TransparencyIndicator.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 228))


class TotalCommissionRefund(AbsoluteAmount):
    pass


TotalCommissionRefund.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 359))


class RecEntityType(univ.Integer):
    pass


RecEntityType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 186))


class TotalDiscountValue(AbsoluteAmount):
    pass


TotalDiscountValue.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 225))


class TotalCharge(AbsoluteAmount):
    pass


TotalCharge.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 415))


class CallEventDetailsCount(univ.Integer):
    pass


CallEventDetailsCount.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 43))


class EarliestCallTimeStamp(DateTimeLong):
    pass


EarliestCallTimeStamp.tagSet = DateTimeLong.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 101))


class LatestCallTimeStamp(DateTimeLong):
    pass


LatestCallTimeStamp.tagSet = DateTimeLong.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 133))


class TotalChargeRefund(AbsoluteAmount):
    pass


TotalChargeRefund.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 355))


class TotalTaxValue(AbsoluteAmount):
    pass


TotalTaxValue.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 226))


class TotalAdvisedCharge(AbsoluteAmount):
    pass


TotalAdvisedCharge.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 356))


class TotalAdvisedChargeRefund(AbsoluteAmount):
    pass


TotalAdvisedChargeRefund.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 357))


class TotalCommission(AbsoluteAmount):
    pass


TotalCommission.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 358))


class TotalAdvisedChargeValue(univ.Sequence):
    pass


TotalAdvisedChargeValue.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 360))
TotalAdvisedChargeValue.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('advisedChargeCurrency', AdvisedChargeCurrency()),
    namedtype.OptionalNamedType('totalAdvisedCharge', TotalAdvisedCharge()),
    namedtype.OptionalNamedType('totalAdvisedChargeRefund', TotalAdvisedChargeRefund()),
    namedtype.OptionalNamedType('totalCommission', TotalCommission()),
    namedtype.OptionalNamedType('totalCommissionRefund', TotalCommissionRefund())
)


class TotalAdvisedChargeValueList(univ.SequenceOf):
    pass


TotalAdvisedChargeValueList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 361))
TotalAdvisedChargeValueList.componentType = TotalAdvisedChargeValue()


class TotalTaxRefund(AbsoluteAmount):
    pass


TotalTaxRefund.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 353))


class TotalDiscountRefund(AbsoluteAmount):
    pass


TotalDiscountRefund.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 354))


class AuditControlInfo(univ.Sequence):
    pass


AuditControlInfo.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 15))
AuditControlInfo.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('earliestCallTimeStamp', EarliestCallTimeStamp()),
    namedtype.OptionalNamedType('latestCallTimeStamp', LatestCallTimeStamp()),
    namedtype.OptionalNamedType('totalCharge', TotalCharge()),
    namedtype.OptionalNamedType('totalChargeRefund', TotalChargeRefund()),
    namedtype.OptionalNamedType('totalTaxRefund', TotalTaxRefund()),
    namedtype.OptionalNamedType('totalTaxValue', TotalTaxValue()),
    namedtype.OptionalNamedType('totalDiscountValue', TotalDiscountValue()),
    namedtype.OptionalNamedType('totalDiscountRefund', TotalDiscountRefund()),
    namedtype.OptionalNamedType('totalAdvisedChargeValueList', TotalAdvisedChargeValueList()),
    namedtype.OptionalNamedType('callEventDetailsCount', CallEventDetailsCount()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class SMSOriginator(AsciiString):
    pass


SMSOriginator.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 425))


class ServingNetwork(AsciiString):
    pass


ServingNetwork.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 195))


class LocationDescription(AsciiString):
    pass


class ServingLocationDescription(LocationDescription):
    pass


ServingLocationDescription.tagSet = LocationDescription.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 414))


class Bid(AsciiString):
    pass


class ServingBid(Bid):
    pass


ServingBid.tagSet = Bid.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 198))


class GeographicalLocation(univ.Sequence):
    pass


GeographicalLocation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 113))
GeographicalLocation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('servingNetwork', ServingNetwork()),
    namedtype.OptionalNamedType('servingBid', ServingBid()),
    namedtype.OptionalNamedType('servingLocationDescription', ServingLocationDescription())
)


class CamelServiceLevel(univ.Integer):
    pass


CamelServiceLevel.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 56))


class LocationArea(univ.Integer):
    pass


LocationArea.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 136))


class CalledNumber(AddressStringDigits):
    pass


CalledNumber.tagSet = AddressStringDigits.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 407))


class DialledDigits(AsciiString):
    pass


DialledDigits.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 279))


class CalledPlace(AsciiString):
    pass


CalledPlace.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 42))


class SMSDestinationNumber(AsciiString):
    pass


SMSDestinationNumber.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 419))


class CalledRegion(AsciiString):
    pass


CalledRegion.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 46))


class Destination(univ.Sequence):
    pass


Destination.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 89))
Destination.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('calledNumber', CalledNumber()),
    namedtype.OptionalNamedType('dialledDigits', DialledDigits()),
    namedtype.OptionalNamedType('calledPlace', CalledPlace()),
    namedtype.OptionalNamedType('calledRegion', CalledRegion()),
    namedtype.OptionalNamedType('sMSDestinationNumber', SMSDestinationNumber())
)


class DefaultCallHandlingIndicator(univ.Integer):
    pass


DefaultCallHandlingIndicator.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 87))


class MessageDescriptionCode(Code):
    pass


MessageDescriptionCode.tagSet = Code.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 141))


class MessageDescription(AsciiString):
    pass


MessageDescription.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 142))


class MessageDescriptionInformation(univ.Sequence):
    pass


MessageDescriptionInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 143))
MessageDescriptionInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('messageDescriptionCode', MessageDescriptionCode()),
    namedtype.OptionalNamedType('messageDescription', MessageDescription())
)


class RecEntityId(AsciiString):
    pass


RecEntityId.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 400))


class RecEntityInformation(univ.Sequence):
    pass


RecEntityInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 183))
RecEntityInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('recEntityCode', RecEntityCode()),
    namedtype.OptionalNamedType('recEntityType', RecEntityType()),
    namedtype.OptionalNamedType('recEntityId', RecEntityId())
)


class RecEntityInfoList(univ.SequenceOf):
    pass


RecEntityInfoList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 188))
RecEntityInfoList.componentType = RecEntityInformation()


class UtcTimeOffsetInfoList(univ.SequenceOf):
    pass


UtcTimeOffsetInfoList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 234))
UtcTimeOffsetInfoList.componentType = UtcTimeOffsetInfo()


class NetworkInfo(univ.Sequence):
    pass


NetworkInfo.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 6))
NetworkInfo.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('utcTimeOffsetInfo', UtcTimeOffsetInfoList()),
    namedtype.OptionalNamedType('recEntityInfo', RecEntityInfoList())
)


class CseInformation(univ.OctetString):
    pass


CseInformation.tagSet = univ.OctetString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 79))


class CamelServiceKey(univ.Integer):
    pass


CamelServiceKey.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 55))


class ThreeGcamelDestination(univ.Choice):
    pass


ThreeGcamelDestination.tagSet = univ.Choice.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 431))
ThreeGcamelDestination.componentType = namedtype.NamedTypes(
    namedtype.NamedType('camelDestinationNumber', CamelDestinationNumber()),
    namedtype.NamedType('gprsDestination', GprsDestination())
)


class CamelServiceUsed(univ.Sequence):
    pass


CamelServiceUsed.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 57))
CamelServiceUsed.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('camelServiceLevel', CamelServiceLevel()),
    namedtype.OptionalNamedType('camelServiceKey', CamelServiceKey()),
    namedtype.OptionalNamedType('defaultCallHandling', DefaultCallHandlingIndicator()),
    namedtype.OptionalNamedType('exchangeRateCode', ExchangeRateCode()),
    namedtype.OptionalNamedType('taxInformation', TaxInformationList()),
    namedtype.OptionalNamedType('discountInformation', DiscountInformation()),
    namedtype.OptionalNamedType('camelInvocationFee', CamelInvocationFee()),
    namedtype.OptionalNamedType('threeGcamelDestination', ThreeGcamelDestination()),
    namedtype.OptionalNamedType('cseInformation', CseInformation())
)


class NetworkId(AsciiString):
    pass


class DestinationNetwork(NetworkId):
    pass


DestinationNetwork.tagSet = NetworkId.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 90))


class OriginatingNetwork(NetworkId):
    pass


OriginatingNetwork.tagSet = NetworkId.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 164))


class ServiceStartTimestamp(DateTime):
    pass


ServiceStartTimestamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 447))


class NonChargedPublicUserId(AsciiString):
    pass


NonChargedPublicUserId.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 445))


class NonChargedParty(univ.Sequence):
    pass


NonChargedParty.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 443))
NonChargedParty.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('nonChargedPartyNumber', NonChargedPartyNumber()),
    namedtype.OptionalNamedType('nonChargedPublicUserId', NonChargedPublicUserId())
)


class EventReference(AsciiString):
    pass


EventReference.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 435))


class SimToolkitIndicator(AsciiString):
    pass


SimToolkitIndicator.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 200))


class CellId(univ.Integer):
    pass


CellId.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 59))


class ElementType(univ.Integer):
    pass


ElementType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 438))


class ElementId(AsciiString):
    pass


ElementId.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 437))


class NetworkElement(univ.Sequence):
    pass


NetworkElement.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 441))
NetworkElement.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('elementType', ElementType()),
    namedtype.OptionalNamedType('elementId', ElementId())
)


class NetworkElementList(univ.SequenceOf):
    pass


NetworkElementList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 442))
NetworkElementList.componentType = NetworkElement()


class HomeBid(Bid):
    pass


HomeBid.tagSet = Bid.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 122))


class HomeLocationDescription(LocationDescription):
    pass


HomeLocationDescription.tagSet = LocationDescription.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 413))


class Imei(BCDString):
    pass


Imei.tagSet = BCDString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 128))


class PublicUserId(AsciiString):
    pass


PublicUserId.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 446))


class ChargedParty(univ.Sequence):
    pass


ChargedParty.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 436))
ChargedParty.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('imsi', Imsi()),
    namedtype.OptionalNamedType('msisdn', Msisdn()),
    namedtype.OptionalNamedType('publicUserId', PublicUserId()),
    namedtype.OptionalNamedType('homeBid', HomeBid()),
    namedtype.OptionalNamedType('homeLocationDescription', HomeLocationDescription()),
    namedtype.OptionalNamedType('imei', Imei())
)


class MessagingEventService(univ.Integer):
    pass


MessagingEventService.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 439))


class RecEntityCodeList(univ.SequenceOf):
    pass


RecEntityCodeList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 185))
RecEntityCodeList.componentType = RecEntityCode()


class MessagingEvent(univ.Sequence):
    pass


MessagingEvent.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 433))
MessagingEvent.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('messagingEventService', MessagingEventService()),
    namedtype.OptionalNamedType('chargedParty', ChargedParty()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('simToolkitIndicator', SimToolkitIndicator()),
    namedtype.OptionalNamedType('geographicalLocation', GeographicalLocation()),
    namedtype.OptionalNamedType('eventReference', EventReference()),
    namedtype.OptionalNamedType('recEntityCodeList', RecEntityCodeList()),
    namedtype.OptionalNamedType('networkElementList', NetworkElementList()),
    namedtype.OptionalNamedType('locationArea', LocationArea()),
    namedtype.OptionalNamedType('cellId', CellId()),
    namedtype.OptionalNamedType('serviceStartTimestamp', ServiceStartTimestamp()),
    namedtype.OptionalNamedType('nonChargedParty', NonChargedParty()),
    namedtype.OptionalNamedType('exchangeRateCode', ExchangeRateCode()),
    namedtype.OptionalNamedType('callTypeGroup', CallTypeGroup()),
    namedtype.OptionalNamedType('charge', Charge()),
    namedtype.OptionalNamedType('taxInformationList', TaxInformationList()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class TapDecimalPlaces(univ.Integer):
    pass


TapDecimalPlaces.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 244))


class ChargedPartyEquipment(univ.Sequence):
    pass


ChargedPartyEquipment.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 323))
ChargedPartyEquipment.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('equipmentIdType', EquipmentIdType()),
    namedtype.OptionalNamedType('equipmentId', EquipmentId())
)


class Esn(NumberString):
    pass


Esn.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 103))


class ImeiOrEsn(univ.Choice):
    pass


ImeiOrEsn.tagSet = univ.Choice.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 429))
ImeiOrEsn.componentType = namedtype.NamedTypes(
    namedtype.NamedType('imei', Imei()),
    namedtype.NamedType('esn', Esn())
)


class NetworkLocation(univ.Sequence):
    pass


NetworkLocation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 156))
NetworkLocation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('recEntityCode', RecEntityCode()),
    namedtype.OptionalNamedType('callReference', CallReference()),
    namedtype.OptionalNamedType('locationArea', LocationArea()),
    namedtype.OptionalNamedType('cellId', CellId())
)


class HomeLocationInformation(univ.Sequence):
    pass


HomeLocationInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 123))
HomeLocationInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('homeBid', HomeBid()),
    namedtype.OptionalNamedType('homeLocationDescription', HomeLocationDescription())
)


class LocationInformation(univ.Sequence):
    pass


LocationInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 138))
LocationInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('networkLocation', NetworkLocation()),
    namedtype.OptionalNamedType('homeLocationInformation', HomeLocationInformation()),
    namedtype.OptionalNamedType('geographicalLocation', GeographicalLocation())
)


class SupplServiceCode(HexString):
    pass


SupplServiceCode.tagSet = HexString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 209))


class SupplServiceActionCode(univ.Integer):
    pass


SupplServiceActionCode.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 208))


class TeleServiceCode(HexString):
    pass


TeleServiceCode.tagSet = HexString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 218))


class BearerServiceCode(HexString):
    pass


BearerServiceCode.tagSet = HexString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 40))


class BasicServiceCode(univ.Choice):
    pass


BasicServiceCode.tagSet = univ.Choice.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 426))
BasicServiceCode.componentType = namedtype.NamedTypes(
    namedtype.NamedType('teleServiceCode', TeleServiceCode()),
    namedtype.NamedType('bearerServiceCode', BearerServiceCode())
)


class BasicServiceCodeList(univ.SequenceOf):
    pass


BasicServiceCodeList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 37))
BasicServiceCodeList.componentType = BasicServiceCode()


class SsParameters(AsciiString):
    pass


SsParameters.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 204))


class SupplServiceUsed(univ.Sequence):
    pass


SupplServiceUsed.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 206))
SupplServiceUsed.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('supplServiceCode', SupplServiceCode()),
    namedtype.OptionalNamedType('supplServiceActionCode', SupplServiceActionCode()),
    namedtype.OptionalNamedType('ssParameters', SsParameters()),
    namedtype.OptionalNamedType('chargingTimeStamp', ChargingTimeStamp()),
    namedtype.OptionalNamedType('chargeInformation', ChargeInformation()),
    namedtype.OptionalNamedType('basicServiceCodeList', BasicServiceCodeList())
)


class SupplServiceEvent(univ.Sequence):
    pass


SupplServiceEvent.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 11))
SupplServiceEvent.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('chargeableSubscriber', ChargeableSubscriber()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('locationInformation', LocationInformation()),
    namedtype.OptionalNamedType('equipmentIdentifier', ImeiOrEsn()),
    namedtype.OptionalNamedType('supplServiceUsed', SupplServiceUsed()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class ChargedPartyHomeIdentification(univ.Sequence):
    pass


ChargedPartyHomeIdentification.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 313))
ChargedPartyHomeIdentification.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('homeIdType', HomeIdType()),
    namedtype.OptionalNamedType('homeIdentifier', HomeIdentifier())
)


class ChargedPartyHomeIdList(univ.SequenceOf):
    pass


ChargedPartyHomeIdList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 314))
ChargedPartyHomeIdList.componentType = ChargedPartyHomeIdentification()


class ChargedPartyLocation(univ.Sequence):
    pass


ChargedPartyLocation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 320))
ChargedPartyLocation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('locationIdType', LocationIdType()),
    namedtype.OptionalNamedType('locationIdentifier', LocationIdentifier())
)


class ChargedPartyLocationList(univ.SequenceOf):
    pass


ChargedPartyLocationList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 321))
ChargedPartyLocationList.componentType = ChargedPartyLocation()


class ChargedPartyIdType(univ.Integer):
    pass


ChargedPartyIdType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 305))


class ChargedPartyIdentifier(AsciiString):
    pass


ChargedPartyIdentifier.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 287))


class ChargedPartyIdentification(univ.Sequence):
    pass


ChargedPartyIdentification.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 309))
ChargedPartyIdentification.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('chargedPartyIdType', ChargedPartyIdType()),
    namedtype.OptionalNamedType('chargedPartyIdentifier', ChargedPartyIdentifier())
)


class ChargedPartyIdList(univ.SequenceOf):
    pass


ChargedPartyIdList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 310))
ChargedPartyIdList.componentType = ChargedPartyIdentification()


class ChargedPartyInformation(univ.Sequence):
    pass


ChargedPartyInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 324))
ChargedPartyInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('chargedPartyIdList', ChargedPartyIdList()),
    namedtype.OptionalNamedType('chargedPartyHomeIdList', ChargedPartyHomeIdList()),
    namedtype.OptionalNamedType('chargedPartyLocationList', ChargedPartyLocationList()),
    namedtype.OptionalNamedType('chargedPartyEquipment', ChargedPartyEquipment())
)


class ContentServiceUsedList(univ.SequenceOf):
    pass


ContentServiceUsedList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 285))
ContentServiceUsedList.componentType = ContentServiceUsed()


class InternetServiceProviderIdList(univ.SequenceOf):
    pass


InternetServiceProviderIdList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 330))
InternetServiceProviderIdList.componentType = InternetServiceProvider()


class ContentProvider(univ.Sequence):
    pass


ContentProvider.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 327))
ContentProvider.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('contentProviderIdType', ContentProviderIdType()),
    namedtype.OptionalNamedType('contentProviderIdentifier', ContentProviderIdentifier())
)


class ContentProviderIdList(univ.SequenceOf):
    pass


ContentProviderIdList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 328))
ContentProviderIdList.componentType = ContentProvider()


class ContentProviderName(AsciiString):
    pass


ContentProviderName.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 334))


class ServingPartiesInformation(univ.Sequence):
    pass


ServingPartiesInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 335))
ServingPartiesInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('contentProviderName', ContentProviderName()),
    namedtype.OptionalNamedType('contentProviderIdList', ContentProviderIdList()),
    namedtype.OptionalNamedType('internetServiceProviderIdList', InternetServiceProviderIdList()),
    namedtype.OptionalNamedType('networkList', NetworkList())
)


class ContentTransaction(univ.Sequence):
    pass


ContentTransaction.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 17))
ContentTransaction.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('contentTransactionBasicInfo', ContentTransactionBasicInfo()),
    namedtype.OptionalNamedType('chargedPartyInformation', ChargedPartyInformation()),
    namedtype.OptionalNamedType('servingPartiesInformation', ServingPartiesInformation()),
    namedtype.OptionalNamedType('contentServiceUsed', ContentServiceUsedList()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class ClirIndicator(univ.Integer):
    pass


ClirIndicator.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 75))


class ThirdPartyNumber(AddressStringDigits):
    pass


ThirdPartyNumber.tagSet = AddressStringDigits.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 403))


class ThirdPartyInformation(univ.Sequence):
    pass


ThirdPartyInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 219))
ThirdPartyInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('thirdPartyNumber', ThirdPartyNumber()),
    namedtype.OptionalNamedType('clirIndicator', ClirIndicator())
)


class HSCSDIndicator(AsciiString):
    pass


HSCSDIndicator.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 424))


class GuaranteedBitRate(univ.OctetString):
    pass


GuaranteedBitRate.tagSet = univ.OctetString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 420))


class MaximumBitRate(univ.OctetString):
    pass


MaximumBitRate.tagSet = univ.OctetString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 421))


class UserProtocolIndicator(univ.Integer):
    pass


UserProtocolIndicator.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 280))


class Fnur(univ.Integer):
    pass


Fnur.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 111))


class BasicService(univ.Sequence):
    pass


BasicService.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 36))
BasicService.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('serviceCode', BasicServiceCode()),
    namedtype.OptionalNamedType('transparencyIndicator', TransparencyIndicator()),
    namedtype.OptionalNamedType('fnur', Fnur()),
    namedtype.OptionalNamedType('userProtocolIndicator', UserProtocolIndicator()),
    namedtype.OptionalNamedType('guaranteedBitRate', GuaranteedBitRate()),
    namedtype.OptionalNamedType('maximumBitRate', MaximumBitRate())
)


class BasicServiceUsed(univ.Sequence):
    pass


BasicServiceUsed.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 39))
BasicServiceUsed.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('basicService', BasicService()),
    namedtype.OptionalNamedType('chargingTimeStamp', ChargingTimeStamp()),
    namedtype.OptionalNamedType('chargeInformationList', ChargeInformationList()),
    namedtype.OptionalNamedType('hSCSDIndicator', HSCSDIndicator())
)


class BasicServiceUsedList(univ.SequenceOf):
    pass


BasicServiceUsedList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 38))
BasicServiceUsedList.componentType = BasicServiceUsed()


class MoBasicCallInformation(univ.Sequence):
    pass


MoBasicCallInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 147))
MoBasicCallInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('chargeableSubscriber', ChargeableSubscriber()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('destination', Destination()),
    namedtype.OptionalNamedType('destinationNetwork', DestinationNetwork()),
    namedtype.OptionalNamedType('callEventStartTimeStamp', CallEventStartTimeStamp()),
    namedtype.OptionalNamedType('totalCallEventDuration', TotalCallEventDuration()),
    namedtype.OptionalNamedType('simToolkitIndicator', SimToolkitIndicator()),
    namedtype.OptionalNamedType('causeForTerm', CauseForTerm())
)


class MobileOriginatedCall(univ.Sequence):
    pass


MobileOriginatedCall.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 9))
MobileOriginatedCall.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('basicCallInformation', MoBasicCallInformation()),
    namedtype.OptionalNamedType('locationInformation', LocationInformation()),
    namedtype.OptionalNamedType('equipmentIdentifier', ImeiOrEsn()),
    namedtype.OptionalNamedType('basicServiceUsedList', BasicServiceUsedList()),
    namedtype.OptionalNamedType('supplServiceCode', SupplServiceCode()),
    namedtype.OptionalNamedType('thirdPartyInformation', ThirdPartyInformation()),
    namedtype.OptionalNamedType('camelServiceUsed', CamelServiceUsed()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class SessionChargeInfoList(univ.SequenceOf):
    pass


SessionChargeInfoList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 448))
SessionChargeInfoList.componentType = SessionChargeInformation()


class MobileSessionService(univ.Integer):
    pass


MobileSessionService.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 440))


class RequestedPublicUserId(AsciiString):
    pass


RequestedPublicUserId.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 452))


class RequestedNumber(AddressStringDigits):
    pass


RequestedNumber.tagSet = AddressStringDigits.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 451))


class RequestedDestination(univ.Sequence):
    pass


RequestedDestination.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 450))
RequestedDestination.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('requestedNumber', RequestedNumber()),
    namedtype.OptionalNamedType('requestedPublicUserId', RequestedPublicUserId())
)


class MobileSession(univ.Sequence):
    pass


MobileSession.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 434))
MobileSession.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('mobileSessionService', MobileSessionService()),
    namedtype.OptionalNamedType('chargedParty', ChargedParty()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('simToolkitIndicator', SimToolkitIndicator()),
    namedtype.OptionalNamedType('geographicalLocation', GeographicalLocation()),
    namedtype.OptionalNamedType('locationArea', LocationArea()),
    namedtype.OptionalNamedType('cellId', CellId()),
    namedtype.OptionalNamedType('eventReference', EventReference()),
    namedtype.OptionalNamedType('recEntityCodeList', RecEntityCodeList()),
    namedtype.OptionalNamedType('serviceStartTimestamp', ServiceStartTimestamp()),
    namedtype.OptionalNamedType('causeForTerm', CauseForTerm()),
    namedtype.OptionalNamedType('totalCallEventDuration', TotalCallEventDuration()),
    namedtype.OptionalNamedType('nonChargedParty', NonChargedParty()),
    namedtype.OptionalNamedType('requestedDestination', RequestedDestination()),
    namedtype.OptionalNamedType('sessionChargeInfoList', SessionChargeInfoList()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class ChargingPoint(AsciiString):
    pass


ChargingPoint.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 73))


class CompletionTimeStamp(DateTime):
    pass


CompletionTimeStamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 76))


class DepositTimeStamp(DateTime):
    pass


DepositTimeStamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 88))


class ScuTimeStamps(univ.Sequence):
    pass


ScuTimeStamps.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 193))
ScuTimeStamps.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('depositTimeStamp', DepositTimeStamp()),
    namedtype.OptionalNamedType('completionTimeStamp', CompletionTimeStamp()),
    namedtype.OptionalNamedType('chargingPoint', ChargingPoint())
)


class ChargedPartyStatus(univ.Integer):
    pass


ChargedPartyStatus.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 67))


class NonChargedNumber(AsciiString):
    pass


NonChargedNumber.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 402))


class ScuBasicInformation(univ.Sequence):
    pass


ScuBasicInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 191))
ScuBasicInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('chargeableSubscriber', ScuChargeableSubscriber()),
    namedtype.OptionalNamedType('chargedPartyStatus', ChargedPartyStatus()),
    namedtype.OptionalNamedType('nonChargedNumber', NonChargedNumber()),
    namedtype.OptionalNamedType('clirIndicator', ClirIndicator()),
    namedtype.OptionalNamedType('originatingNetwork', OriginatingNetwork()),
    namedtype.OptionalNamedType('destinationNetwork', DestinationNetwork())
)


class MessageType(univ.Integer):
    pass


MessageType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 145))


class PriorityCode(univ.Integer):
    pass


PriorityCode.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 170))


class DistanceChargeBandCode(AsciiString):
    pass


DistanceChargeBandCode.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 98))


class MessageStatus(univ.Integer):
    pass


MessageStatus.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 144))


class ScuChargeType(univ.Sequence):
    pass


ScuChargeType.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 192))
ScuChargeType.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('messageStatus', MessageStatus()),
    namedtype.OptionalNamedType('priorityCode', PriorityCode()),
    namedtype.OptionalNamedType('distanceChargeBandCode', DistanceChargeBandCode()),
    namedtype.OptionalNamedType('messageType', MessageType()),
    namedtype.OptionalNamedType('messageDescriptionCode', MessageDescriptionCode())
)


class ServiceCentreUsage(univ.Sequence):
    pass


ServiceCentreUsage.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 12))
ServiceCentreUsage.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('basicInformation', ScuBasicInformation()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('servingNetwork', ServingNetwork()),
    namedtype.OptionalNamedType('recEntityCode', RecEntityCode()),
    namedtype.OptionalNamedType('chargeInformation', ChargeInformation()),
    namedtype.OptionalNamedType('scuChargeType', ScuChargeType()),
    namedtype.OptionalNamedType('scuTimeStamps', ScuTimeStamps()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class GprsNetworkLocation(univ.Sequence):
    pass


GprsNetworkLocation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 118))
GprsNetworkLocation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('recEntity', RecEntityCodeList()),
    namedtype.OptionalNamedType('locationArea', LocationArea()),
    namedtype.OptionalNamedType('cellId', CellId())
)


class GprsLocationInformation(univ.Sequence):
    pass


GprsLocationInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 117))
GprsLocationInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('gprsNetworkLocation', GprsNetworkLocation()),
    namedtype.OptionalNamedType('homeLocationInformation', HomeLocationInformation()),
    namedtype.OptionalNamedType('geographicalLocation', GeographicalLocation())
)


class IMSSignallingContext(univ.Integer):
    pass


IMSSignallingContext.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 418))


class GprsServiceUsed(univ.Sequence):
    pass


GprsServiceUsed.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 121))
GprsServiceUsed.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('iMSSignallingContext', IMSSignallingContext()),
    namedtype.OptionalNamedType('dataVolumeIncoming', DataVolumeIncoming()),
    namedtype.OptionalNamedType('dataVolumeOutgoing', DataVolumeOutgoing()),
    namedtype.OptionalNamedType('chargeInformationList', ChargeInformationList())
)


class GprsCall(univ.Sequence):
    pass


GprsCall.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 14))
GprsCall.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('gprsBasicCallInformation', GprsBasicCallInformation()),
    namedtype.OptionalNamedType('gprsLocationInformation', GprsLocationInformation()),
    namedtype.OptionalNamedType('equipmentIdentifier', ImeiOrEsn()),
    namedtype.OptionalNamedType('gprsServiceUsed', GprsServiceUsed()),
    namedtype.OptionalNamedType('camelServiceUsed', CamelServiceUsed()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class CallingNumber(AddressStringDigits):
    pass


CallingNumber.tagSet = AddressStringDigits.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 405))


class CallOriginator(univ.Sequence):
    pass


CallOriginator.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 41))
CallOriginator.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('callingNumber', CallingNumber()),
    namedtype.OptionalNamedType('clirIndicator', ClirIndicator()),
    namedtype.OptionalNamedType('sMSOriginator', SMSOriginator())
)


class MtBasicCallInformation(univ.Sequence):
    pass


MtBasicCallInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 153))
MtBasicCallInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('chargeableSubscriber', ChargeableSubscriber()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('callOriginator', CallOriginator()),
    namedtype.OptionalNamedType('originatingNetwork', OriginatingNetwork()),
    namedtype.OptionalNamedType('callEventStartTimeStamp', CallEventStartTimeStamp()),
    namedtype.OptionalNamedType('totalCallEventDuration', TotalCallEventDuration()),
    namedtype.OptionalNamedType('simToolkitIndicator', SimToolkitIndicator()),
    namedtype.OptionalNamedType('causeForTerm', CauseForTerm())
)


class MobileTerminatedCall(univ.Sequence):
    pass


MobileTerminatedCall.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 10))
MobileTerminatedCall.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('basicCallInformation', MtBasicCallInformation()),
    namedtype.OptionalNamedType('locationInformation', LocationInformation()),
    namedtype.OptionalNamedType('equipmentIdentifier', ImeiOrEsn()),
    namedtype.OptionalNamedType('basicServiceUsedList', BasicServiceUsedList()),
    namedtype.OptionalNamedType('camelServiceUsed', CamelServiceUsed()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class CallEventDetail(univ.Choice):
    pass


CallEventDetail.componentType = namedtype.NamedTypes(
    namedtype.NamedType('mobileOriginatedCall', MobileOriginatedCall()),
    namedtype.NamedType('mobileTerminatedCall', MobileTerminatedCall()),
    namedtype.NamedType('supplServiceEvent', SupplServiceEvent()),
    namedtype.NamedType('serviceCentreUsage', ServiceCentreUsage()),
    namedtype.NamedType('gprsCall', GprsCall()),
    namedtype.NamedType('contentTransaction', ContentTransaction()),
    namedtype.NamedType('locationService', LocationService()),
    namedtype.NamedType('messagingEvent', MessagingEvent()),
    namedtype.NamedType('mobileSession', MobileSession())
)


class CallEventDetailList(univ.SequenceOf):
    pass


CallEventDetailList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 3))
CallEventDetailList.componentType = CallEventDetail()


class FileCreationTimeStamp(DateTimeLong):
    pass


FileCreationTimeStamp.tagSet = DateTimeLong.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 108))


class Sender(PlmnId):
    pass


Sender.tagSet = PlmnId.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 196))


class SpecificationVersionNumber(univ.Integer):
    pass


SpecificationVersionNumber.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 201))


class Recipient(PlmnId):
    pass


Recipient.tagSet = PlmnId.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 182))


class TransferCutOffTimeStamp(DateTimeLong):
    pass


TransferCutOffTimeStamp.tagSet = DateTimeLong.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 227))


class ReleaseVersionNumber(univ.Integer):
    pass


ReleaseVersionNumber.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 189))


class BatchControlInfo(univ.Sequence):
    pass


BatchControlInfo.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 4))
BatchControlInfo.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('sender', Sender()),
    namedtype.OptionalNamedType('recipient', Recipient()),
    namedtype.OptionalNamedType('fileSequenceNumber', FileSequenceNumber()),
    namedtype.OptionalNamedType('fileCreationTimeStamp', FileCreationTimeStamp()),
    namedtype.OptionalNamedType('transferCutOffTimeStamp', TransferCutOffTimeStamp()),
    namedtype.OptionalNamedType('fileAvailableTimeStamp', FileAvailableTimeStamp()),
    namedtype.OptionalNamedType('specificationVersionNumber', SpecificationVersionNumber()),
    namedtype.OptionalNamedType('releaseVersionNumber', ReleaseVersionNumber()),
    namedtype.OptionalNamedType('fileTypeIndicator', FileTypeIndicator()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class ExchangeRate(univ.Integer):
    pass


ExchangeRate.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 104))


class NumberOfDecimalPlaces(univ.Integer):
    pass


NumberOfDecimalPlaces.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 159))


class CurrencyConversion(univ.Sequence):
    pass


CurrencyConversion.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 106))
CurrencyConversion.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('exchangeRateCode', ExchangeRateCode()),
    namedtype.OptionalNamedType('numberOfDecimalPlaces', NumberOfDecimalPlaces()),
    namedtype.OptionalNamedType('exchangeRate', ExchangeRate())
)


class CurrencyConversionList(univ.SequenceOf):
    pass


CurrencyConversionList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 80))
CurrencyConversionList.componentType = CurrencyConversion()


class FixedDiscountValue(DiscountValue):
    pass


FixedDiscountValue.tagSet = DiscountValue.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 411))


class PercentageRate(univ.Integer):
    pass


class DiscountRate(PercentageRate):
    pass


DiscountRate.tagSet = PercentageRate.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 92))


class DiscountApplied(univ.Choice):
    pass


DiscountApplied.tagSet = univ.Choice.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 428))
DiscountApplied.componentType = namedtype.NamedTypes(
    namedtype.NamedType('fixedDiscountValue', FixedDiscountValue()),
    namedtype.NamedType('discountRate', DiscountRate())
)


class TaxType(AsciiString):
    pass


TaxType.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 217))


class TaxIndicator(AsciiString):
    pass


TaxIndicator.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 432))


class Taxation(univ.Sequence):
    pass


Taxation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 216))
Taxation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('taxCode', TaxCode()),
    namedtype.OptionalNamedType('taxType', TaxType()),
    namedtype.OptionalNamedType('taxRate', TaxRate()),
    namedtype.OptionalNamedType('chargeType', ChargeType()),
    namedtype.OptionalNamedType('taxIndicator', TaxIndicator())
)


class Discounting(univ.Sequence):
    pass


Discounting.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 94))
Discounting.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('discountCode', DiscountCode()),
    namedtype.OptionalNamedType('discountApplied', DiscountApplied())
)


class Notification(univ.Sequence):
    pass


Notification.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 2))
Notification.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('sender', Sender()),
    namedtype.OptionalNamedType('recipient', Recipient()),
    namedtype.OptionalNamedType('fileSequenceNumber', FileSequenceNumber()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('fileCreationTimeStamp', FileCreationTimeStamp()),
    namedtype.OptionalNamedType('fileAvailableTimeStamp', FileAvailableTimeStamp()),
    namedtype.OptionalNamedType('transferCutOffTimeStamp', TransferCutOffTimeStamp()),
    namedtype.OptionalNamedType('specificationVersionNumber', SpecificationVersionNumber()),
    namedtype.OptionalNamedType('releaseVersionNumber', ReleaseVersionNumber()),
    namedtype.OptionalNamedType('fileTypeIndicator', FileTypeIndicator()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class MessageDescriptionInfoList(univ.SequenceOf):
    pass


MessageDescriptionInfoList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 8))
MessageDescriptionInfoList.componentType = MessageDescriptionInformation()


class LocalCurrency(Currency):
    pass


LocalCurrency.tagSet = Currency.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 135))


class TapCurrency(Currency):
    pass


TapCurrency.tagSet = Currency.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 210))


class DiscountingList(univ.SequenceOf):
    pass


DiscountingList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 95))
DiscountingList.componentType = Discounting()


class TaxationList(univ.SequenceOf):
    pass


TaxationList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 211))
TaxationList.componentType = Taxation()


class AccountingInfo(univ.Sequence):
    pass


AccountingInfo.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 5))
AccountingInfo.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('taxation', TaxationList()),
    namedtype.OptionalNamedType('discounting', DiscountingList()),
    namedtype.OptionalNamedType('localCurrency', LocalCurrency()),
    namedtype.OptionalNamedType('tapCurrency', TapCurrency()),
    namedtype.OptionalNamedType('currencyConversionInfo', CurrencyConversionList()),
    namedtype.OptionalNamedType('tapDecimalPlaces', TapDecimalPlaces())
)


class TransferBatch(univ.Sequence):
    pass


TransferBatch.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 1))
TransferBatch.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('batchControlInfo', BatchControlInfo()),
    namedtype.OptionalNamedType('accountingInfo', AccountingInfo()),
    namedtype.OptionalNamedType('networkInfo', NetworkInfo()),
    namedtype.OptionalNamedType('messageDescriptionInfo', MessageDescriptionInfoList()),
    namedtype.OptionalNamedType('callEventDetails', CallEventDetailList()),
    namedtype.OptionalNamedType('auditControlInfo', AuditControlInfo())
)


class DataInterChange(univ.Choice):
    pass


DataInterChange.componentType = namedtype.NamedTypes(
    namedtype.NamedType('transferBatch', TransferBatch()),
    namedtype.NamedType('notification', Notification())
)


