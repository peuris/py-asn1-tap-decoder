# Auto-generated by asn1ate on 2016-05-24 12:56:15.531030
from pyasn1.type import univ, char, namedtype, namedval, tag, constraint, useful


class Code(univ.Integer):
    pass


Code.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 243))


class RecEntityCode(Code):
    pass


RecEntityCode.tagSet = Code.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 184))


class CallReference(univ.OctetString):
    pass


CallReference.tagSet = univ.OctetString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 45))


class LocationArea(univ.Integer):
    pass


LocationArea.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 136))


class CellId(univ.Integer):
    pass


CellId.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 59))


class NetworkLocation(univ.Sequence):
    pass


NetworkLocation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 156))
NetworkLocation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('recEntityCode', RecEntityCode()),
    namedtype.OptionalNamedType('callReference', CallReference()),
    namedtype.OptionalNamedType('locationArea', LocationArea()),
    namedtype.OptionalNamedType('cellId', CellId())
)


class AsciiString(univ.OctetString):
    pass


class ServingNetwork(AsciiString):
    pass


ServingNetwork.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 195))


class Latitude(univ.Integer):
    pass


Latitude.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 134))


class LocationDescription(AsciiString):
    pass


LocationDescription.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 137))


class Longitude(univ.Integer):
    pass


Longitude.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 139))


class Bid(AsciiString):
    pass


Bid.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 242))


class ServingBid(Bid):
    pass


ServingBid.tagSet = Bid.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 198))


class GeographicalLocation(univ.Sequence):
    pass


GeographicalLocation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 113))
GeographicalLocation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('servingNetwork', ServingNetwork()),
    namedtype.OptionalNamedType('servingBid', ServingBid()),
    namedtype.OptionalNamedType('servingLocationDescription', LocationDescription()),
    namedtype.OptionalNamedType('longitude', Longitude()),
    namedtype.OptionalNamedType('latitude', Latitude())
)


class HomeBid(Bid):
    pass


HomeBid.tagSet = Bid.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 122))


class HomeLocationInformation(univ.Sequence):
    pass


HomeLocationInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 123))
HomeLocationInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('homeBid', HomeBid()),
    namedtype.OptionalNamedType('homeLocationDescription', LocationDescription())
)


class LocationInformation(univ.Sequence):
    pass


LocationInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 138))
LocationInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('networkLocation', NetworkLocation()),
    namedtype.OptionalNamedType('homeLocationInformation', HomeLocationInformation()),
    namedtype.OptionalNamedType('geographicalLocation', GeographicalLocation())
)


class SimToolkitIndicator(AsciiString):
    pass


SimToolkitIndicator.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 200))


class BCDString(univ.OctetString):
    pass


class Msisdn(BCDString):
    pass


Msisdn.tagSet = BCDString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 152))


class Imsi(BCDString):
    pass


Imsi.tagSet = BCDString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 129))


class SimChargeableSubscriber(univ.Sequence):
    pass


SimChargeableSubscriber.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 199))
SimChargeableSubscriber.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('imsi', Imsi()),
    namedtype.OptionalNamedType('msisdn', Msisdn())
)


class NumberString(univ.OctetString):
    pass


class Mdn(NumberString):
    pass


Mdn.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 253))


class Min(NumberString):
    pass


Min.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 146))


class MinChargeableSubscriber(univ.Sequence):
    pass


MinChargeableSubscriber.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 254))
MinChargeableSubscriber.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('min', Min()),
    namedtype.OptionalNamedType('mdn', Mdn())
)


class ChargeableSubscriber(univ.Choice):
    pass


ChargeableSubscriber.componentType = namedtype.NamedTypes(
    namedtype.NamedType('simChargeableSubscriber', SimChargeableSubscriber()),
    namedtype.NamedType('minChargeableSubscriber', MinChargeableSubscriber())
)


class Imei(BCDString):
    pass


Imei.tagSet = BCDString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 128))


class Esn(NumberString):
    pass


Esn.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 103))


class ImeiOrEsn(univ.Choice):
    pass


ImeiOrEsn.componentType = namedtype.NamedTypes(
    namedtype.NamedType('imei', Imei()),
    namedtype.NamedType('esn', Esn())
)


class MobileStationClassMark(univ.Integer):
    pass


MobileStationClassMark.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 148))


class EquipmentInformation(univ.Sequence):
    pass


EquipmentInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 102))
EquipmentInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('mobileStationClassMark', MobileStationClassMark()),
    namedtype.OptionalNamedType('imeiOrEsn', ImeiOrEsn())
)


class OperatorSpecInformation(AsciiString):
    pass


OperatorSpecInformation.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 163))


class OperatorSpecInfoList(univ.SequenceOf):
    pass


OperatorSpecInfoList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 162))
OperatorSpecInfoList.componentType = OperatorSpecInformation()


class NetworkType(univ.Integer):
    pass


NetworkType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 157))


class FileSequenceNumber(NumberString):
    pass


FileSequenceNumber.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 109))


class RapFileSequenceNumber(FileSequenceNumber):
    pass


RapFileSequenceNumber.tagSet = FileSequenceNumber.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 181))


class FraudMonitorIndicator(AsciiString):
    pass


FraudMonitorIndicator.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 112))


class TypeOfNumber(univ.Integer):
    pass


TypeOfNumber.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 230))


class AddressStringDigits(BCDString):
    pass


AddressStringDigits.tagSet = BCDString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 33))


class ModificationIndicator(univ.Integer):
    pass


ModificationIndicator.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 149))


class NumberingPlan(univ.Integer):
    pass


NumberingPlan.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 160))


class ClirIndicator(univ.Integer):
    pass


ClirIndicator.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 75))


class ThirdPartyInformation(univ.Sequence):
    pass


ThirdPartyInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 219))
ThirdPartyInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('typeOfNumber', TypeOfNumber()),
    namedtype.OptionalNamedType('numberingPlan', NumberingPlan()),
    namedtype.OptionalNamedType('thirdPartyNumber', AddressStringDigits()),
    namedtype.OptionalNamedType('modificationIndicator', ModificationIndicator()),
    namedtype.OptionalNamedType('clirIndicator', ClirIndicator())
)


class HexString(univ.OctetString):
    pass


class SupplServiceCode(HexString):
    pass


SupplServiceCode.tagSet = HexString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 209))


class SupplServiceActionCode(univ.Integer):
    pass


SupplServiceActionCode.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 208))


class TeleServiceCode(HexString):
    pass


TeleServiceCode.tagSet = HexString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 218))


class BearerServiceCode(HexString):
    pass


BearerServiceCode.tagSet = HexString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 40))


class BasicServiceCode(univ.Choice):
    pass


BasicServiceCode.componentType = namedtype.NamedTypes(
    namedtype.NamedType('teleServiceCode', TeleServiceCode()),
    namedtype.NamedType('bearerServiceCode', BearerServiceCode())
)


class BasicServiceCodeList(univ.SequenceOf):
    pass


BasicServiceCodeList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 37))
BasicServiceCodeList.componentType = BasicServiceCode()


class TimeBand(AsciiString):
    pass


TimeBand.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 220))


class ChargeableUnits(univ.Integer):
    pass


ChargeableUnits.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 65))


class ChargedUnits(univ.Integer):
    pass


ChargedUnits.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 68))


class DayCategorySubtype(AsciiString):
    pass


DayCategorySubtype.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 86))


class DayCategory(AsciiString):
    pass


DayCategory.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 85))


class AbsoluteAmount(univ.Integer):
    pass


AbsoluteAmount.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 241))


class Charge(AbsoluteAmount):
    pass


Charge.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 62))


class MultiRateIndicator(univ.Integer):
    pass


MultiRateIndicator.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 154))


class ChargeType(NumberString):
    pass


ChargeType.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 71))


class UtcTimeOffsetCode(Code):
    pass


UtcTimeOffsetCode.tagSet = Code.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 232))


class LocalTimeStamp(NumberString):
    pass


LocalTimeStamp.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 16))


class DateTime(univ.Sequence):
    pass


DateTime.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 83))
DateTime.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('localTimeStamp', LocalTimeStamp()),
    namedtype.OptionalNamedType('utcTimeOffsetCode', UtcTimeOffsetCode())
)


class ChargingTimeStamp(DateTime):
    pass


ChargingTimeStamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 74))


class TimeBandSubtype(AsciiString):
    pass


TimeBandSubtype.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 221))


class ChargeDetail(univ.Sequence):
    pass


ChargeDetail.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 63))
ChargeDetail.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('chargeType', ChargeType()),
    namedtype.OptionalNamedType('charge', Charge()),
    namedtype.OptionalNamedType('chargeableUnits', ChargeableUnits()),
    namedtype.OptionalNamedType('chargedUnits', ChargedUnits()),
    namedtype.OptionalNamedType('chargeDetailTimeStamp', ChargingTimeStamp()),
    namedtype.OptionalNamedType('dayCategory', DayCategory()),
    namedtype.OptionalNamedType('dayCategorySubtype', DayCategorySubtype()),
    namedtype.OptionalNamedType('timeBand', TimeBand()),
    namedtype.OptionalNamedType('timeBandSubtype', TimeBandSubtype()),
    namedtype.OptionalNamedType('multiRateIndicator', MultiRateIndicator())
)


class ChargeDetailList(univ.SequenceOf):
    pass


ChargeDetailList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 64))
ChargeDetailList.componentType = ChargeDetail()


class CallTypeLevel1(univ.Integer):
    pass


CallTypeLevel1.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 259))


class CallTypeLevel2(univ.Integer):
    pass


CallTypeLevel2.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 255))


class CallTypeLevel3(univ.Integer):
    pass


CallTypeLevel3.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 256))


class CalledCountryCode(NumberString):
    pass


CalledCountryCode.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 257))


class CallTypeGroup(univ.Sequence):
    pass


CallTypeGroup.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 258))
CallTypeGroup.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('callTypeLevel1', CallTypeLevel1()),
    namedtype.OptionalNamedType('callTypeLevel2', CallTypeLevel2()),
    namedtype.OptionalNamedType('callTypeLevel3', CallTypeLevel3()),
    namedtype.OptionalNamedType('calledCountryCode', CalledCountryCode())
)


class ChargedItem(AsciiString):
    pass


ChargedItem.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 66))


class TaxCode(univ.Integer):
    pass


TaxCode.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 212))


class TaxInformation(univ.Sequence):
    pass


TaxInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 213))
TaxInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('taxCode', TaxCode()),
    namedtype.OptionalNamedType('taxValue', Charge())
)


class TaxInformationList(univ.SequenceOf):
    pass


TaxInformationList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 214))
TaxInformationList.componentType = TaxInformation()


class DiscountCode(univ.Integer):
    pass


DiscountCode.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 91))


class DiscountValue(AbsoluteAmount):
    pass


DiscountValue.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 93))


class DiscountInformation(univ.Sequence):
    pass


DiscountInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 96))
DiscountInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('discountCode', DiscountCode()),
    namedtype.OptionalNamedType('discount', DiscountValue())
)


class ExchangeRateCode(Code):
    pass


ExchangeRateCode.tagSet = Code.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 105))


class ChargeInformation(univ.Sequence):
    pass


ChargeInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 69))
ChargeInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('chargedItem', ChargedItem()),
    namedtype.OptionalNamedType('exchangeRateCode', ExchangeRateCode()),
    namedtype.OptionalNamedType('callTypeGroup', CallTypeGroup()),
    namedtype.OptionalNamedType('chargeDetailList', ChargeDetailList()),
    namedtype.OptionalNamedType('taxInformation', TaxInformationList()),
    namedtype.OptionalNamedType('discountInformation', DiscountInformation())
)


class SsParameters(AsciiString):
    pass


SsParameters.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 204))


class SupplServiceUsed(univ.Sequence):
    pass


SupplServiceUsed.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 206))
SupplServiceUsed.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('supplServiceCode', SupplServiceCode()),
    namedtype.OptionalNamedType('supplServiceActionCode', SupplServiceActionCode()),
    namedtype.OptionalNamedType('ssParameters', SsParameters()),
    namedtype.OptionalNamedType('thirdPartyInformation', ThirdPartyInformation()),
    namedtype.OptionalNamedType('chargingTimeStamp', ChargingTimeStamp()),
    namedtype.OptionalNamedType('chargeInformation', ChargeInformation()),
    namedtype.OptionalNamedType('basicServiceCodeList', BasicServiceCodeList())
)


class SupplServiceEvent(univ.Sequence):
    pass


SupplServiceEvent.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 11))
SupplServiceEvent.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('fraudMonitorIndicator', FraudMonitorIndicator()),
    namedtype.OptionalNamedType('chargeableSubscriber', ChargeableSubscriber()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('networkType', NetworkType()),
    namedtype.OptionalNamedType('locationInformation', LocationInformation()),
    namedtype.OptionalNamedType('equipmentInformation', EquipmentInformation()),
    namedtype.OptionalNamedType('supplServiceUsed', SupplServiceUsed()),
    namedtype.OptionalNamedType('simToolkitIndicator', SimToolkitIndicator()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class TotalDiscountValue(AbsoluteAmount):
    pass


TotalDiscountValue.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 225))


class LocationIdType(univ.Integer):
    pass


LocationIdType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 315))


class AccessPointNameOI(AsciiString):
    pass


AccessPointNameOI.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 262))


class PacketDataProtocolAddress(AsciiString):
    pass


PacketDataProtocolAddress.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 165))


class RemotePdpAddressList(univ.SequenceOf):
    pass


RemotePdpAddressList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 190))
RemotePdpAddressList.componentType = PacketDataProtocolAddress()


class AccessPointNameNI(AsciiString):
    pass


AccessPointNameNI.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 261))


class GprsDestination(univ.Sequence):
    pass


GprsDestination.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 116))
GprsDestination.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('accessPointNameNI', AccessPointNameNI()),
    namedtype.OptionalNamedType('accessPointNameOI', AccessPointNameOI()),
    namedtype.OptionalNamedType('remotePdpAddressList', RemotePdpAddressList())
)


class CamelDestination(univ.Sequence):
    pass


CamelDestination.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 51))
CamelDestination.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('typeOfNumber', TypeOfNumber()),
    namedtype.OptionalNamedType('numberingPlan', NumberingPlan()),
    namedtype.OptionalNamedType('camelDestinationNumber', AddressStringDigits())
)


class ThreeGcamelDestination(univ.Choice):
    pass


ThreeGcamelDestination.componentType = namedtype.NamedTypes(
    namedtype.NamedType('camelDestination', CamelDestination()),
    namedtype.NamedType('gprsDestination', GprsDestination())
)


class CamelModification(univ.Integer):
    pass


CamelModification.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 53))


class CamelModificationList(univ.SequenceOf):
    pass


CamelModificationList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 54))
CamelModificationList.componentType = CamelModification()


class CseInformation(univ.OctetString):
    pass


CseInformation.tagSet = univ.OctetString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 79))


class CamelServiceLevel(univ.Integer):
    pass


CamelServiceLevel.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 56))


class CamelCallReferenceNumber(HexString):
    pass


CamelCallReferenceNumber.tagSet = HexString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 50))


class CamelCallReference(univ.Sequence):
    pass


CamelCallReference.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 49))
CamelCallReference.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('typeOfNumber', TypeOfNumber()),
    namedtype.OptionalNamedType('numberingPlan', NumberingPlan()),
    namedtype.OptionalNamedType('mscAddress', AddressStringDigits()),
    namedtype.OptionalNamedType('callReferenceNumber', CamelCallReferenceNumber())
)


class DefaultCallHandlingIndicator(univ.Integer):
    pass


DefaultCallHandlingIndicator.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 87))


class CamelServiceKey(univ.Integer):
    pass


CamelServiceKey.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 55))


class CamelInitiatedCFIndicator(univ.Integer):
    pass


CamelInitiatedCFIndicator.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 52))


class CamelServiceUsed(univ.Sequence):
    pass


CamelServiceUsed.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 57))
CamelServiceUsed.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('typeOfNumber', TypeOfNumber()),
    namedtype.OptionalNamedType('numberingPlan', NumberingPlan()),
    namedtype.OptionalNamedType('camelServerAddress', AddressStringDigits()),
    namedtype.OptionalNamedType('camelServiceLevel', CamelServiceLevel()),
    namedtype.OptionalNamedType('camelServiceKey', CamelServiceKey()),
    namedtype.OptionalNamedType('defaultCallHandling', DefaultCallHandlingIndicator()),
    namedtype.OptionalNamedType('camelCallReference', CamelCallReference()),
    namedtype.OptionalNamedType('camelChargeInformation', ChargeInformation()),
    namedtype.OptionalNamedType('camelInitiatedCFIndicator', CamelInitiatedCFIndicator()),
    namedtype.OptionalNamedType('camelModificationList', CamelModificationList()),
    namedtype.OptionalNamedType('threeGcamelDestination', ThreeGcamelDestination()),
    namedtype.OptionalNamedType('cseInformation', CseInformation())
)


class CountryName(AsciiString):
    pass


CountryName.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 316))


class CauseForTerm(univ.Integer):
    pass


CauseForTerm.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 58))


class CountryAsciCode(AsciiString):
    pass


CountryAsciCode.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 317))


class Region(AsciiString):
    pass


Region.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 318))


class PercentageRate(univ.Integer):
    pass


class DiscountRate(PercentageRate):
    pass


DiscountRate.tagSet = PercentageRate.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 92))


class DiscountApplied(univ.Choice):
    pass


DiscountApplied.componentType = namedtype.NamedTypes(
    namedtype.NamedType('fixedDiscountValue', DiscountValue()),
    namedtype.NamedType('discountRate', DiscountRate())
)


class CountryCode(NumberString):
    pass


CountryCode.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 77))


class Place(AsciiString):
    pass


Place.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 319))


class IPTextV6Address(AsciiString):
    pass


IPTextV6Address.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 132))


class IPTextV4Address(AsciiString):
    pass


IPTextV4Address.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 131))


class IpAddress(univ.Choice):
    pass


IpAddress.componentType = namedtype.NamedTypes(
    namedtype.NamedType('iPTextV4Address', IPTextV4Address()),
    namedtype.NamedType('iPTextV6Address', IPTextV6Address())
)


class LocationIdentifier(univ.Choice):
    pass


LocationIdentifier.componentType = namedtype.NamedTypes(
    namedtype.NamedType('countryName', CountryName()),
    namedtype.NamedType('countryE164Id', CountryCode()),
    namedtype.NamedType('countryCode', CountryAsciCode()),
    namedtype.NamedType('region', Region()),
    namedtype.NamedType('place', Place()),
    namedtype.NamedType('ipLocation', IpAddress())
)


class TotalTaxValue(AbsoluteAmount):
    pass


TotalTaxValue.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 226))


class ChargedPartyLocation(univ.Sequence):
    pass


ChargedPartyLocation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 320))
ChargedPartyLocation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('locationIdType', LocationIdType()),
    namedtype.OptionalNamedType('locationIdentifier', LocationIdentifier())
)


class ChargingPoint(AsciiString):
    pass


ChargingPoint.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 73))


class CompletionTimeStamp(DateTime):
    pass


CompletionTimeStamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 76))


class DepositTimeStamp(DateTime):
    pass


DepositTimeStamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 88))


class ScuTimeStamps(univ.Sequence):
    pass


ScuTimeStamps.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 193))
ScuTimeStamps.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('depositTimeStamp', DepositTimeStamp()),
    namedtype.OptionalNamedType('completionTimeStamp', CompletionTimeStamp()),
    namedtype.OptionalNamedType('chargingPoint', ChargingPoint())
)


class ChargedPartyStatus(univ.Integer):
    pass


ChargedPartyStatus.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 67))


class CalledNumAnalysisCode(Code):
    pass


CalledNumAnalysisCode.tagSet = Code.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 247))


class NonChargedParty(univ.Sequence):
    pass


NonChargedParty.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 158))
NonChargedParty.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('typeOfNumber', TypeOfNumber()),
    namedtype.OptionalNamedType('numberingPlan', NumberingPlan()),
    namedtype.OptionalNamedType('nonChargedNumber', AddressStringDigits()),
    namedtype.OptionalNamedType('calledNumAnalysisCode', CalledNumAnalysisCode()),
    namedtype.OptionalNamedType('modificationIndicator', ModificationIndicator())
)


class ScuVasChargeableSubscriber(univ.Choice):
    pass


ScuVasChargeableSubscriber.componentType = namedtype.NamedTypes(
    namedtype.NamedType('simChargeableSubscriber', SimChargeableSubscriber()),
    namedtype.NamedType('msisdn', Msisdn()),
    namedtype.NamedType('min', Min())
)


class NetworkId(AsciiString):
    pass


NetworkId.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 155))


class OriginatingNetwork(NetworkId):
    pass


OriginatingNetwork.tagSet = NetworkId.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 164))


class DestinationNetwork(NetworkId):
    pass


DestinationNetwork.tagSet = NetworkId.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 90))


class ScuBasicInformation(univ.Sequence):
    pass


ScuBasicInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 191))
ScuBasicInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('chargeableSubscriber', ScuVasChargeableSubscriber()),
    namedtype.OptionalNamedType('chargedPartyStatus', ChargedPartyStatus()),
    namedtype.OptionalNamedType('nonChargedParty', NonChargedParty()),
    namedtype.OptionalNamedType('clirIndicator', ClirIndicator()),
    namedtype.OptionalNamedType('originatingNetwork', OriginatingNetwork()),
    namedtype.OptionalNamedType('destinationNetwork', DestinationNetwork())
)


class MessageType(univ.Integer):
    pass


MessageType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 145))


class MessageDescriptionCode(Code):
    pass


MessageDescriptionCode.tagSet = Code.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 141))


class PriorityCode(univ.Integer):
    pass


PriorityCode.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 170))


class DistanceChargeBandCode(AsciiString):
    pass


DistanceChargeBandCode.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 98))


class MessageStatus(univ.Integer):
    pass


MessageStatus.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 144))


class ScuChargeType(univ.Sequence):
    pass


ScuChargeType.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 192))
ScuChargeType.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('messageStatus', MessageStatus()),
    namedtype.OptionalNamedType('priorityCode', PriorityCode()),
    namedtype.OptionalNamedType('distanceChargeBandCode', DistanceChargeBandCode()),
    namedtype.OptionalNamedType('messageType', MessageType()),
    namedtype.OptionalNamedType('messageDescriptionCode', MessageDescriptionCode())
)


class ServiceCentreUsage(univ.Sequence):
    pass


ServiceCentreUsage.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 12))
ServiceCentreUsage.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('fraudMonitorIndicator', FraudMonitorIndicator()),
    namedtype.OptionalNamedType('basicInformation', ScuBasicInformation()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('networkType', NetworkType()),
    namedtype.OptionalNamedType('servingNetwork', ServingNetwork()),
    namedtype.OptionalNamedType('recEntityCode', RecEntityCode()),
    namedtype.OptionalNamedType('chargeInformation', ChargeInformation()),
    namedtype.OptionalNamedType('scuChargeType', ScuChargeType()),
    namedtype.OptionalNamedType('scuTimeStamps', ScuTimeStamps()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class QoSAllocRetenPriority(univ.Integer):
    pass


QoSAllocRetenPriority.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 275))


class QoSResidualBER(univ.Integer):
    pass


QoSResidualBER.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 266))


class QoSDeliveryOrder(univ.Integer):
    pass


QoSDeliveryOrder.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 278))


class QoSTrafficClass(univ.Integer):
    pass


QoSTrafficClass.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 268))


class QoSTransferDelay(univ.OctetString):
    pass


QoSTransferDelay.tagSet = univ.OctetString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 269))


class QoSMaxBitRateUplink(univ.OctetString):
    pass


QoSMaxBitRateUplink.tagSet = univ.OctetString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 264))


class QoSMaxBitRateDownlink(univ.OctetString):
    pass


QoSMaxBitRateDownlink.tagSet = univ.OctetString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 274))


class QoSSDUErrorRatio(univ.Integer):
    pass


QoSSDUErrorRatio.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 267))


class QoSErroneousSDUs(univ.Integer):
    pass


QoSErroneousSDUs.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 277))


class QoSHandlingpriority(univ.Integer):
    pass


QoSHandlingpriority.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 276))


class QoSMaxSDUsize(univ.OctetString):
    pass


QoSMaxSDUsize.tagSet = univ.OctetString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 265))


class UMTSQoSInformation(univ.Sequence):
    pass


UMTSQoSInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('trafficClass', QoSTrafficClass()),
    namedtype.OptionalNamedType('maxBitRateUplink', QoSMaxBitRateUplink()),
    namedtype.OptionalNamedType('maxBitRateDownlink', QoSMaxBitRateDownlink()),
    namedtype.OptionalNamedType('deliveryOrder', QoSDeliveryOrder()),
    namedtype.OptionalNamedType('maxSDUsize', QoSMaxSDUsize()),
    namedtype.OptionalNamedType('sduErrorRatio', QoSSDUErrorRatio()),
    namedtype.OptionalNamedType('residualBER', QoSResidualBER()),
    namedtype.OptionalNamedType('erroneousSDUs', QoSErroneousSDUs()),
    namedtype.OptionalNamedType('transferDelay', QoSTransferDelay()),
    namedtype.OptionalNamedType('handlingPriority', QoSHandlingpriority()),
    namedtype.OptionalNamedType('allocRetenPriority', QoSAllocRetenPriority())
)


class UMTSQoSUsed(UMTSQoSInformation):
    pass


UMTSQoSUsed.tagSet = UMTSQoSInformation.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 271))


class DiscountDefinition(univ.Sequence):
    pass


DiscountDefinition.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 94))
DiscountDefinition.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('discountCode', DiscountCode()),
    namedtype.OptionalNamedType('discountApplied', DiscountApplied())
)


class UtcTimeOffset(AsciiString):
    pass


UtcTimeOffset.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 231))


class UtcTimeOffsetDefinition(univ.Sequence):
    pass


UtcTimeOffsetDefinition.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 233))
UtcTimeOffsetDefinition.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('utcTimeOffsetCode', UtcTimeOffsetCode()),
    namedtype.OptionalNamedType('utcTimeOffset', UtcTimeOffset())
)


class UtcTimeOffsetInfo(univ.SequenceOf):
    pass


UtcTimeOffsetInfo.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 234))
UtcTimeOffsetInfo.componentType = UtcTimeOffsetDefinition()


class ChannelCoding(univ.Integer):
    pass


ChannelCoding.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 60))


class ChannelCodingsAcceptable(univ.SequenceOf):
    pass


ChannelCodingsAcceptable.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 61))
ChannelCodingsAcceptable.componentType = ChannelCoding()


class EquipmentIdType(univ.Integer):
    pass


EquipmentIdType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 322))


class AccessPointName(AsciiString):
    pass


AccessPointName.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 32))


class Currency(univ.OctetString):
    pass


class TapCurrency(Currency):
    pass


TapCurrency.tagSet = Currency.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 210))


class EquipmentId(univ.Choice):
    pass


EquipmentId.componentType = namedtype.NamedTypes(
    namedtype.NamedType('imei', Imei()),
    namedtype.NamedType('esn', Esn())
)


class ChargedPartyEquipment(univ.Sequence):
    pass


ChargedPartyEquipment.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 323))
ChargedPartyEquipment.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('equipmentIdType', EquipmentIdType()),
    namedtype.OptionalNamedType('equipmentId', EquipmentId())
)


class DualBearerServiceCode(HexString):
    pass


DualBearerServiceCode.tagSet = HexString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 99))


class DualTeleServiceCode(HexString):
    pass


DualTeleServiceCode.tagSet = HexString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 100))


class DualServiceCode(univ.Choice):
    pass


DualServiceCode.componentType = namedtype.NamedTypes(
    namedtype.NamedType('dualTeleServiceCode', DualTeleServiceCode()),
    namedtype.NamedType('dualBearerServiceCode', DualBearerServiceCode())
)


class FileTypeIndicator(AsciiString):
    pass


FileTypeIndicator.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 110))


class DateTimeLong(univ.Sequence):
    pass


DateTimeLong.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 84))
DateTimeLong.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('localTimeStamp', LocalTimeStamp()),
    namedtype.OptionalNamedType('utcTimeOffset', UtcTimeOffset())
)


class FileCreationTimeStamp(DateTimeLong):
    pass


FileCreationTimeStamp.tagSet = DateTimeLong.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 108))


class PlmnId(AsciiString):
    pass


PlmnId.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 169))


class Sender(PlmnId):
    pass


Sender.tagSet = PlmnId.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 196))


class SpecificationVersionNumber(univ.Integer):
    pass


SpecificationVersionNumber.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 201))


class Recipient(PlmnId):
    pass


Recipient.tagSet = PlmnId.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 182))


class TransferCutOffTimeStamp(DateTimeLong):
    pass


TransferCutOffTimeStamp.tagSet = DateTimeLong.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 227))


class ReleaseVersionNumber(univ.Integer):
    pass


ReleaseVersionNumber.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 189))


class FileAvailableTimeStamp(DateTimeLong):
    pass


FileAvailableTimeStamp.tagSet = DateTimeLong.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 107))


class Notification(univ.Sequence):
    pass


Notification.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 2))
Notification.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('sender', Sender()),
    namedtype.OptionalNamedType('recipient', Recipient()),
    namedtype.OptionalNamedType('fileSequenceNumber', FileSequenceNumber()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('fileCreationTimeStamp', FileCreationTimeStamp()),
    namedtype.OptionalNamedType('fileAvailableTimeStamp', FileAvailableTimeStamp()),
    namedtype.OptionalNamedType('transferCutOffTimeStamp', TransferCutOffTimeStamp()),
    namedtype.OptionalNamedType('specificationVersionNumber', SpecificationVersionNumber()),
    namedtype.OptionalNamedType('releaseVersionNumber', ReleaseVersionNumber()),
    namedtype.OptionalNamedType('fileTypeIndicator', FileTypeIndicator()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class Name(AsciiString):
    pass


Name.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 312))


class HomeIdentifier(univ.Choice):
    pass


HomeIdentifier.componentType = namedtype.NamedTypes(
    namedtype.NamedType('name', Name()),
    namedtype.NamedType('tadigCode', PlmnId()),
    namedtype.NamedType('homeBid', HomeBid()),
    namedtype.NamedType('homeLocationDescription', LocationDescription())
)


class HomeIdType(univ.Integer):
    pass


HomeIdType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 311))


class ChargedPartyHomeId(univ.Sequence):
    pass


ChargedPartyHomeId.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 313))
ChargedPartyHomeId.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('homeIdType', HomeIdType()),
    namedtype.OptionalNamedType('homeIdentifier', HomeIdentifier())
)


class ChargedPartyHomeIdList(univ.SequenceOf):
    pass


ChargedPartyHomeIdList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 314))
ChargedPartyHomeIdList.componentType = ChargedPartyHomeId()


class ChargedPartyLocationList(univ.SequenceOf):
    pass


ChargedPartyLocationList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 321))
ChargedPartyLocationList.componentType = ChargedPartyLocation()


class ChargedPartyIdType(univ.Integer):
    pass


ChargedPartyIdType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 305))


class LoginName(AsciiString):
    pass


LoginName.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 306))


class AccountNumber(AsciiString):
    pass


AccountNumber.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 307))


class EmailAddress(AsciiString):
    pass


EmailAddress.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 308))


class ChargedPartyIdentification(univ.Choice):
    pass


ChargedPartyIdentification.componentType = namedtype.NamedTypes(
    namedtype.NamedType('msisdn', Msisdn()),
    namedtype.NamedType('imsi', Imsi()),
    namedtype.NamedType('min', Min()),
    namedtype.NamedType('ipAddress', IpAddress()),
    namedtype.NamedType('loginName', LoginName()),
    namedtype.NamedType('accountNumber', AccountNumber()),
    namedtype.NamedType('emailAddress', EmailAddress())
)


class ChargedPartyId(univ.Sequence):
    pass


ChargedPartyId.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 309))
ChargedPartyId.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('chargedPartyIdType', ChargedPartyIdType()),
    namedtype.OptionalNamedType('chargedPartyIdentification', ChargedPartyIdentification())
)


class ChargedPartyIdList(univ.SequenceOf):
    pass


ChargedPartyIdList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 310))
ChargedPartyIdList.componentType = ChargedPartyId()


class ChargedPartyInformation(univ.Sequence):
    pass


ChargedPartyInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 324))
ChargedPartyInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('chargedPartyIdList', ChargedPartyIdList()),
    namedtype.OptionalNamedType('chargedPartyHomeIdList', ChargedPartyHomeIdList()),
    namedtype.OptionalNamedType('chargedPartyLocationList', ChargedPartyLocationList()),
    namedtype.OptionalNamedType('chargedPartyEquipment', ChargedPartyEquipment())
)


class Description(univ.OctetString):
    pass


class VasDescription(Description):
    pass


VasDescription.tagSet = Description.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 239))


class VasShortDescription(Description):
    pass


VasShortDescription.tagSet = Description.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 240))


class VasCode(Code):
    pass


VasCode.tagSet = Code.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 237))


class VasDefinition(univ.Sequence):
    pass


VasDefinition.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 238))
VasDefinition.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('vasCode', VasCode()),
    namedtype.OptionalNamedType('vasShortDesc', VasShortDescription()),
    namedtype.OptionalNamedType('vasDesc', VasDescription())
)


class LatestCallTimeStamp(DateTimeLong):
    pass


LatestCallTimeStamp.tagSet = DateTimeLong.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 133))


class TaxType(AsciiString):
    pass


TaxType.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 217))


class TaxRate(NumberString):
    pass


TaxRate.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 215))


class TaxRateDefinition(univ.Sequence):
    pass


TaxRateDefinition.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 216))
TaxRateDefinition.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('taxCode', TaxCode()),
    namedtype.OptionalNamedType('taxType', TaxType()),
    namedtype.OptionalNamedType('taxRate', TaxRate())
)


class Taxation(univ.SequenceOf):
    pass


Taxation.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 211))
Taxation.componentType = TaxRateDefinition()


class AdvisedCharge(Charge):
    pass


AdvisedCharge.tagSet = Charge.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 349))


class Commission(Charge):
    pass


Commission.tagSet = Charge.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 350))


class AdvisedChargeCurrency(Currency):
    pass


AdvisedChargeCurrency.tagSet = Currency.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 348))


class PaymentMethod(univ.Integer):
    pass


PaymentMethod.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 347))


class PaidIndicator(univ.Integer):
    pass


PaidIndicator.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 346))


class AdvisedChargeInformation(univ.Sequence):
    pass


AdvisedChargeInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 351))
AdvisedChargeInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('paidIndicator', PaidIndicator()),
    namedtype.OptionalNamedType('paymentMethod', PaymentMethod()),
    namedtype.OptionalNamedType('advisedChargeCurrency', AdvisedChargeCurrency()),
    namedtype.OptionalNamedType('advisedCharge', AdvisedCharge()),
    namedtype.OptionalNamedType('commission', Commission())
)


class TransactionDetailDescription(AsciiString):
    pass


TransactionDetailDescription.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 339))


class DataVolume(univ.Integer):
    pass


DataVolume.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 81))


class DataVolumeIncoming(DataVolume):
    pass


DataVolumeIncoming.tagSet = DataVolume.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 250))


class TotalDataVolume(DataVolume):
    pass


TotalDataVolume.tagSet = DataVolume.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 343))


class TransactionIdentifier(AsciiString):
    pass


TransactionIdentifier.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 341))


class TransactionShortDescription(AsciiString):
    pass


TransactionShortDescription.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 340))


class ContentChargingPoint(univ.Integer):
    pass


ContentChargingPoint.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 345))


class ChargeRefundIndicator(univ.Integer):
    pass


ChargeRefundIndicator.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 344))


class DataVolumeOutgoing(DataVolume):
    pass


DataVolumeOutgoing.tagSet = DataVolume.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 251))


class ChargeInformationList(univ.SequenceOf):
    pass


ChargeInformationList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 70))
ChargeInformationList.componentType = ChargeInformation()


class ContentTransactionCode(univ.Integer):
    pass


ContentTransactionCode.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 336))


class TransactionAuthCode(AsciiString):
    pass


TransactionAuthCode.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 342))


class ContentTransactionType(univ.Integer):
    pass


ContentTransactionType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 337))


class TransactionDescriptionSupp(univ.Integer):
    pass


TransactionDescriptionSupp.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 338))


class ContentServiceUsed(univ.Sequence):
    pass


ContentServiceUsed.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 352))
ContentServiceUsed.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('contentTransactionCode', ContentTransactionCode()),
    namedtype.OptionalNamedType('contentTransactionType', ContentTransactionType()),
    namedtype.OptionalNamedType('transactionDescriptionSupp', TransactionDescriptionSupp()),
    namedtype.OptionalNamedType('transactionShortDescription', TransactionShortDescription()),
    namedtype.OptionalNamedType('transactionDetailDescription', TransactionDetailDescription()),
    namedtype.OptionalNamedType('transactionIdentifier', TransactionIdentifier()),
    namedtype.OptionalNamedType('transactionAuthCode', TransactionAuthCode()),
    namedtype.OptionalNamedType('dataVolumeIncoming', DataVolumeIncoming()),
    namedtype.OptionalNamedType('dataVolumeOutgoing', DataVolumeOutgoing()),
    namedtype.OptionalNamedType('totalDataVolume', TotalDataVolume()),
    namedtype.OptionalNamedType('chargeRefundIndicator', ChargeRefundIndicator()),
    namedtype.OptionalNamedType('contentChargingPoint', ContentChargingPoint()),
    namedtype.OptionalNamedType('chargeInformationList', ChargeInformationList()),
    namedtype.OptionalNamedType('advisedChargeInformation', AdvisedChargeInformation())
)


class TapDecimalPlaces(univ.Integer):
    pass


TapDecimalPlaces.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 244))


class LocalCurrency(Currency):
    pass


LocalCurrency.tagSet = Currency.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 135))


class ExchangeRate(univ.Integer):
    pass


ExchangeRate.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 104))


class NumberOfDecimalPlaces(univ.Integer):
    pass


NumberOfDecimalPlaces.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 159))


class ExchangeRateDefinition(univ.Sequence):
    pass


ExchangeRateDefinition.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 106))
ExchangeRateDefinition.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('exchangeRateCode', ExchangeRateCode()),
    namedtype.OptionalNamedType('numberOfDecimalPlaces', NumberOfDecimalPlaces()),
    namedtype.OptionalNamedType('exchangeRate', ExchangeRate())
)


class CurrencyConversion(univ.SequenceOf):
    pass


CurrencyConversion.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 80))
CurrencyConversion.componentType = ExchangeRateDefinition()


class Discounting(univ.SequenceOf):
    pass


Discounting.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 95))
Discounting.componentType = DiscountDefinition()


class AccountingInfo(univ.Sequence):
    pass


AccountingInfo.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 5))
AccountingInfo.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('taxation', Taxation()),
    namedtype.OptionalNamedType('discounting', Discounting()),
    namedtype.OptionalNamedType('localCurrency', LocalCurrency()),
    namedtype.OptionalNamedType('tapCurrency', TapCurrency()),
    namedtype.OptionalNamedType('currencyConversion', CurrencyConversion()),
    namedtype.OptionalNamedType('tapDecimalPlaces', TapDecimalPlaces())
)


class ModificationTimestamp(DateTime):
    pass


ModificationTimestamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 150))


class QoSDelay(univ.Integer):
    pass


QoSDelay.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 171))


class QoSPeakThroughput(univ.Integer):
    pass


QoSPeakThroughput.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 174))


class QoSPrecedence(univ.Integer):
    pass


QoSPrecedence.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 175))


class QoSMeanThroughput(univ.Integer):
    pass


QoSMeanThroughput.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 173))


class QoSReliability(univ.Integer):
    pass


QoSReliability.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 176))


class GSMQoSInformation(univ.Sequence):
    pass


GSMQoSInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('delay', QoSDelay()),
    namedtype.OptionalNamedType('meanThroughput', QoSMeanThroughput()),
    namedtype.OptionalNamedType('peakThroughput', QoSPeakThroughput()),
    namedtype.OptionalNamedType('precedence', QoSPrecedence()),
    namedtype.OptionalNamedType('reliability', QoSReliability())
)


class MscId(AsciiString):
    pass


MscId.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 151))


class TotalTaxRefund(AbsoluteAmount):
    pass


TotalTaxRefund.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 353))


class OrderPlacementTimeStamp(DateTime):
    pass


OrderPlacementTimeStamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 300))


class TotalCallEventDuration(univ.Integer):
    pass


TotalCallEventDuration.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 223))


class CallEventStartTimeStamp(DateTime):
    pass


CallEventStartTimeStamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 44))


class CallOriginator(univ.Sequence):
    pass


CallOriginator.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 41))
CallOriginator.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('typeOfNumber', TypeOfNumber()),
    namedtype.OptionalNamedType('numberingPlan', NumberingPlan()),
    namedtype.OptionalNamedType('callingNumber', AddressStringDigits()),
    namedtype.OptionalNamedType('modificationIndicator', ModificationIndicator()),
    namedtype.OptionalNamedType('clirIndicator', ClirIndicator())
)


class MtBasicCallInformation(univ.Sequence):
    pass


MtBasicCallInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 153))
MtBasicCallInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('fraudMonitorIndicator', FraudMonitorIndicator()),
    namedtype.OptionalNamedType('chargeableSubscriber', ChargeableSubscriber()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('networkType', NetworkType()),
    namedtype.OptionalNamedType('callOriginator', CallOriginator()),
    namedtype.OptionalNamedType('originatingNetwork', OriginatingNetwork()),
    namedtype.OptionalNamedType('callEventStartTimeStamp', CallEventStartTimeStamp()),
    namedtype.OptionalNamedType('totalCallEventDuration', TotalCallEventDuration()),
    namedtype.OptionalNamedType('simToolkitIndicator', SimToolkitIndicator()),
    namedtype.OptionalNamedType('causeForTerm', CauseForTerm())
)


class GSMQoSRequested(GSMQoSInformation):
    pass


GSMQoSRequested.tagSet = GSMQoSInformation.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 272))


class BatchControlInfo(univ.Sequence):
    pass


BatchControlInfo.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 4))
BatchControlInfo.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('sender', Sender()),
    namedtype.OptionalNamedType('recipient', Recipient()),
    namedtype.OptionalNamedType('fileSequenceNumber', FileSequenceNumber()),
    namedtype.OptionalNamedType('fileCreationTimeStamp', FileCreationTimeStamp()),
    namedtype.OptionalNamedType('transferCutOffTimeStamp', TransferCutOffTimeStamp()),
    namedtype.OptionalNamedType('fileAvailableTimeStamp', FileAvailableTimeStamp()),
    namedtype.OptionalNamedType('specificationVersionNumber', SpecificationVersionNumber()),
    namedtype.OptionalNamedType('releaseVersionNumber', ReleaseVersionNumber()),
    namedtype.OptionalNamedType('fileTypeIndicator', FileTypeIndicator()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class ActualDeliveryTimeStamp(DateTime):
    pass


ActualDeliveryTimeStamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 302))


class RequestedDeliveryTimeStamp(DateTime):
    pass


RequestedDeliveryTimeStamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 301))


class TransactionStatus(univ.Integer):
    pass


TransactionStatus.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 303))


class ContentTransactionBasicInfo(univ.Sequence):
    pass


ContentTransactionBasicInfo.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 304))
ContentTransactionBasicInfo.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('fraudMonitorIndicator', FraudMonitorIndicator()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('orderPlacementTimeStamp', OrderPlacementTimeStamp()),
    namedtype.OptionalNamedType('requestedDeliveryTimeStamp', RequestedDeliveryTimeStamp()),
    namedtype.OptionalNamedType('actualDeliveryTimeStamp', ActualDeliveryTimeStamp()),
    namedtype.OptionalNamedType('totalTransactionDuration', TotalCallEventDuration()),
    namedtype.OptionalNamedType('transactionStatus', TransactionStatus())
)


class Url(AsciiString):
    pass


Url.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 326))


class ProviderId(univ.Choice):
    pass


ProviderId.componentType = namedtype.NamedTypes(
    namedtype.NamedType('name', Name()),
    namedtype.NamedType('tadigCode', PlmnId()),
    namedtype.NamedType('url', Url()),
    namedtype.NamedType('ipAddress', IpAddress())
)


class ProviderIdType(univ.Integer):
    pass


ProviderIdType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 325))


class InternetServiceProviderId(univ.Sequence):
    pass


InternetServiceProviderId.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 329))
InternetServiceProviderId.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('internetServiceProviderIdType', ProviderIdType()),
    namedtype.OptionalNamedType('internetServiceProviderId', ProviderId())
)


class InternetServiceProviderIdList(univ.SequenceOf):
    pass


InternetServiceProviderIdList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 330))
InternetServiceProviderIdList.componentType = InternetServiceProviderId()


class ContentProviderId(univ.Sequence):
    pass


ContentProviderId.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 327))
ContentProviderId.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('contentProviderIdType', ProviderIdType()),
    namedtype.OptionalNamedType('contentProviderId', ProviderId())
)


class ContentProviderIdList(univ.SequenceOf):
    pass


ContentProviderIdList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 328))
ContentProviderIdList.componentType = ContentProviderId()


class NetworkIdType(univ.Integer):
    pass


NetworkIdType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 331))


class NetworkDesc(univ.Choice):
    pass


NetworkDesc.componentType = namedtype.NamedTypes(
    namedtype.NamedType('name', Name()),
    namedtype.NamedType('tadigCode', PlmnId()),
    namedtype.NamedType('homeBid', HomeBid()),
    namedtype.NamedType('homeLocationDescription', LocationDescription()),
    namedtype.NamedType('apn', AccessPointName())
)


class NetworkIdGroup(univ.Sequence):
    pass


NetworkIdGroup.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 332))
NetworkIdGroup.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('networkIdType', NetworkIdType()),
    namedtype.OptionalNamedType('networkId', NetworkDesc())
)


class NetworkIdList(univ.SequenceOf):
    pass


NetworkIdList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 333))
NetworkIdList.componentType = NetworkIdGroup()


class ContentProviderName(AsciiString):
    pass


ContentProviderName.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 334))


class ServingPartiesInformation(univ.Sequence):
    pass


ServingPartiesInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 335))
ServingPartiesInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('contentProviderName', ContentProviderName()),
    namedtype.OptionalNamedType('contentProviderIdList', ContentProviderIdList()),
    namedtype.OptionalNamedType('internetServiceProviderIdList', InternetServiceProviderIdList()),
    namedtype.OptionalNamedType('networkIdList', NetworkIdList())
)


class ContentTransaction(univ.Sequence):
    pass


ContentTransaction.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 17))
ContentTransaction.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('contentTransactionBasicInfo', ContentTransactionBasicInfo()),
    namedtype.OptionalNamedType('chargedPartyInformation', ChargedPartyInformation()),
    namedtype.OptionalNamedType('servingPartiesInformation', ServingPartiesInformation()),
    namedtype.OptionalNamedType('contentServiceUsed', ContentServiceUsed()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class TransparencyIndicator(univ.Integer):
    pass


TransparencyIndicator.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 228))


class SpeechVersion(univ.Integer):
    pass


class SpeechVersionRequested(SpeechVersion):
    pass


SpeechVersionRequested.tagSet = SpeechVersion.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 202))


class RadioChannelRequested(univ.Integer):
    pass


RadioChannelRequested.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 179))


class SpeechVersionUsed(SpeechVersion):
    pass


SpeechVersionUsed.tagSet = SpeechVersion.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 203))


class RadioChannelUsed(univ.Integer):
    pass


RadioChannelUsed.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 180))


class BasicService(univ.Sequence):
    pass


BasicService.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 36))
BasicService.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('serviceCode', BasicServiceCode()),
    namedtype.OptionalNamedType('radioChannelRequested', RadioChannelRequested()),
    namedtype.OptionalNamedType('radioChannelUsed', RadioChannelUsed()),
    namedtype.OptionalNamedType('speechVersionRequested', SpeechVersionRequested()),
    namedtype.OptionalNamedType('speechVersionUsed', SpeechVersionUsed()),
    namedtype.OptionalNamedType('transparencyIndicator', TransparencyIndicator())
)


class AiurRequested(univ.Integer):
    pass


AiurRequested.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 34))


class NumberOfChannels(univ.Integer):
    pass


NumberOfChannels.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 161))


class Fnur(univ.Integer):
    pass


Fnur.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 111))


class NumberOfChannelsUsed(univ.Integer):
    pass


NumberOfChannelsUsed.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 252))


class BasicHSCSDParameters(univ.Sequence):
    pass


BasicHSCSDParameters.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 35))
BasicHSCSDParameters.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('fnur', Fnur()),
    namedtype.OptionalNamedType('aiur', AiurRequested()),
    namedtype.OptionalNamedType('maxNumberOfChannels', NumberOfChannels()),
    namedtype.OptionalNamedType('channelCodingsAcceptable', ChannelCodingsAcceptable()),
    namedtype.OptionalNamedType('channelCodingUsed', ChannelCoding()),
    namedtype.OptionalNamedType('numberOfChannelsUsed', NumberOfChannelsUsed())
)


class InitiatingParty(univ.Integer):
    pass


InitiatingParty.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 130))


class HSCSDParameterModification(univ.Sequence):
    pass


HSCSDParameterModification.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 125))
HSCSDParameterModification.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('aiur', AiurRequested()),
    namedtype.OptionalNamedType('maxNumberOfChannels', NumberOfChannels()),
    namedtype.OptionalNamedType('channelCodingUsed', ChannelCoding()),
    namedtype.OptionalNamedType('numberOfChannelsUsed', NumberOfChannelsUsed()),
    namedtype.OptionalNamedType('initiatingParty', InitiatingParty()),
    namedtype.OptionalNamedType('modificationTimestamp', ModificationTimestamp())
)


class HSCSDParameterModificationList(univ.SequenceOf):
    pass


HSCSDParameterModificationList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 140))
HSCSDParameterModificationList.componentType = HSCSDParameterModification()


class HSCSDInformation(univ.Sequence):
    pass


HSCSDInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 124))
HSCSDInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('basicHSCSDParameters', BasicHSCSDParameters()),
    namedtype.OptionalNamedType('hSCSDParameterModificationList', HSCSDParameterModificationList())
)


class DataVolumeReference(univ.Integer):
    pass


DataVolumeReference.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 82))


class BasicServiceUsed(univ.Sequence):
    pass


BasicServiceUsed.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 39))
BasicServiceUsed.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('basicService', BasicService()),
    namedtype.OptionalNamedType('chargingTimeStamp', ChargingTimeStamp()),
    namedtype.OptionalNamedType('chargeInformationList', ChargeInformationList()),
    namedtype.OptionalNamedType('dataVolumeReference', DataVolumeReference()),
    namedtype.OptionalNamedType('hSCSDInformation', HSCSDInformation())
)


class BasicServiceUsedList(univ.SequenceOf):
    pass


BasicServiceUsedList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 38))
BasicServiceUsedList.componentType = BasicServiceUsed()


class SupplServiceUsedList(univ.SequenceOf):
    pass


SupplServiceUsedList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 207))
SupplServiceUsedList.componentType = SupplServiceUsed()


class CalledRegion(AsciiString):
    pass


CalledRegion.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 46))


class CalledPlace(AsciiString):
    pass


CalledPlace.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 42))


class Destination(univ.Sequence):
    pass


Destination.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 89))
Destination.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('typeOfNumber', TypeOfNumber()),
    namedtype.OptionalNamedType('numberingPlan', NumberingPlan()),
    namedtype.OptionalNamedType('calledNumber', AddressStringDigits()),
    namedtype.OptionalNamedType('modificationIndicator', ModificationIndicator()),
    namedtype.OptionalNamedType('calledPlace', CalledPlace()),
    namedtype.OptionalNamedType('calledRegion', CalledRegion()),
    namedtype.OptionalNamedType('calledNumAnalysisCode', CalledNumAnalysisCode())
)


class MoBasicCallInformation(univ.Sequence):
    pass


MoBasicCallInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 147))
MoBasicCallInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('fraudMonitorIndicator', FraudMonitorIndicator()),
    namedtype.OptionalNamedType('chargeableSubscriber', ChargeableSubscriber()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('networkType', NetworkType()),
    namedtype.OptionalNamedType('destination', Destination()),
    namedtype.OptionalNamedType('destinationNetwork', DestinationNetwork()),
    namedtype.OptionalNamedType('callEventStartTimeStamp', CallEventStartTimeStamp()),
    namedtype.OptionalNamedType('totalCallEventDuration', TotalCallEventDuration()),
    namedtype.OptionalNamedType('simToolkitIndicator', SimToolkitIndicator()),
    namedtype.OptionalNamedType('causeForTerm', CauseForTerm())
)


class ValueAddedServiceUsed(univ.Sequence):
    pass


ValueAddedServiceUsed.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 236))
ValueAddedServiceUsed.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('vasCode', VasCode()),
    namedtype.OptionalNamedType('chargingTimeStamp', ChargingTimeStamp()),
    namedtype.OptionalNamedType('chargeInformation', ChargeInformation())
)


class ValueAddedServiceUsedList(univ.SequenceOf):
    pass


ValueAddedServiceUsedList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 235))
ValueAddedServiceUsedList.componentType = ValueAddedServiceUsed()


class MobileOriginatedCall(univ.Sequence):
    pass


MobileOriginatedCall.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 9))
MobileOriginatedCall.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('basicCallInformation', MoBasicCallInformation()),
    namedtype.OptionalNamedType('locationInformation', LocationInformation()),
    namedtype.OptionalNamedType('equipmentInformation', EquipmentInformation()),
    namedtype.OptionalNamedType('basicServiceUsedList', BasicServiceUsedList()),
    namedtype.OptionalNamedType('supplServiceUsedList', SupplServiceUsedList()),
    namedtype.OptionalNamedType('camelServiceUsed', CamelServiceUsed()),
    namedtype.OptionalNamedType('valueAddedServiceUsedList', ValueAddedServiceUsedList()),
    namedtype.OptionalNamedType('dualServiceRequested', DualServiceCode()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class ValueAddedService(univ.Sequence):
    pass


ValueAddedService.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 13))
ValueAddedService.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('fraudMonitorIndicator', FraudMonitorIndicator()),
    namedtype.OptionalNamedType('chargeableSubscriber', ScuVasChargeableSubscriber()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('networkType', NetworkType()),
    namedtype.OptionalNamedType('servingNetwork', ServingNetwork()),
    namedtype.OptionalNamedType('valueAddedServiceUsed', ValueAddedServiceUsed()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class RecEntityCodeList(univ.SequenceOf):
    pass


RecEntityCodeList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 185))
RecEntityCodeList.componentType = RecEntityCode()


class GprsNetworkLocation(univ.Sequence):
    pass


GprsNetworkLocation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 118))
GprsNetworkLocation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('recEntity', RecEntityCodeList()),
    namedtype.OptionalNamedType('locationArea', LocationArea()),
    namedtype.OptionalNamedType('cellId', CellId())
)


class GprsLocationInformation(univ.Sequence):
    pass


GprsLocationInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 117))
GprsLocationInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('gprsNetworkLocation', GprsNetworkLocation()),
    namedtype.OptionalNamedType('homeLocationInformation', HomeLocationInformation()),
    namedtype.OptionalNamedType('geographicalLocation', GeographicalLocation())
)


class TypeOfControllingNode(univ.Integer):
    pass


TypeOfControllingNode.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 229))


class PdpType(univ.Integer):
    pass


PdpType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 168))


class ChargingCharacteristics(univ.OctetString):
    pass


ChargingCharacteristics.tagSet = univ.OctetString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 263))


class PdpAddress(PacketDataProtocolAddress):
    pass


PdpAddress.tagSet = PacketDataProtocolAddress.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 167))


class GprsChargeableSubscriber(univ.Sequence):
    pass


GprsChargeableSubscriber.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 115))
GprsChargeableSubscriber.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('chargeableSubscriber', ChargeableSubscriber()),
    namedtype.OptionalNamedType('pdpType', PdpType()),
    namedtype.OptionalNamedType('pdpAddress', PdpAddress()),
    namedtype.OptionalNamedType('chargingCharacteristics', ChargingCharacteristics())
)


class ChargingId(univ.Integer):
    pass


ChargingId.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 72))


class PDPContextStartTimestamp(DateTime):
    pass


PDPContextStartTimestamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 260))


class PartialTypeIndicator(AsciiString):
    pass


PartialTypeIndicator.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 166))


class NetworkInitPDPContext(univ.Integer):
    pass


NetworkInitPDPContext.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 245))


class GprsBasicCallInformation(univ.Sequence):
    pass


GprsBasicCallInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 114))
GprsBasicCallInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('fraudMonitorIndicator', FraudMonitorIndicator()),
    namedtype.OptionalNamedType('chargeableSubscriber', GprsChargeableSubscriber()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('networkType', NetworkType()),
    namedtype.OptionalNamedType('gprsDestination', GprsDestination()),
    namedtype.OptionalNamedType('callEventStartTimeStamp', CallEventStartTimeStamp()),
    namedtype.OptionalNamedType('totalCallEventDuration', TotalCallEventDuration()),
    namedtype.OptionalNamedType('causeForTerm', CauseForTerm()),
    namedtype.OptionalNamedType('partialTypeIndicator', PartialTypeIndicator()),
    namedtype.OptionalNamedType('pDPContextStartTimestamp', PDPContextStartTimestamp()),
    namedtype.OptionalNamedType('networkInitPDPContext', NetworkInitPDPContext()),
    namedtype.OptionalNamedType('chargingId', ChargingId())
)


class UMTSQoSRequested(UMTSQoSInformation):
    pass


UMTSQoSRequested.tagSet = UMTSQoSInformation.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 270))


class QoSRequested(univ.Choice):
    pass


QoSRequested.componentType = namedtype.NamedTypes(
    namedtype.NamedType('gsmQoSRequested', GSMQoSRequested()),
    namedtype.NamedType('umtsQoSRequested', UMTSQoSRequested())
)


class GSMQoSUsed(GSMQoSInformation):
    pass


GSMQoSUsed.tagSet = GSMQoSInformation.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 273))


class QoSUsed(univ.Choice):
    pass


QoSUsed.componentType = namedtype.NamedTypes(
    namedtype.NamedType('gsmQoSUsed', GSMQoSUsed()),
    namedtype.NamedType('umtsQoSUsed', UMTSQoSUsed())
)


class GprsServiceUsage(univ.Sequence):
    pass


GprsServiceUsage.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 119))
GprsServiceUsage.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('gprsUsageTimeStamp', ChargingTimeStamp()),
    namedtype.OptionalNamedType('qosRequested', QoSRequested()),
    namedtype.OptionalNamedType('qosUsed', QoSUsed()),
    namedtype.OptionalNamedType('dataVolumeIncoming', DataVolumeIncoming()),
    namedtype.OptionalNamedType('dataVolumeOutgoing', DataVolumeOutgoing())
)


class GprsServiceUsageList(univ.SequenceOf):
    pass


GprsServiceUsageList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 120))
GprsServiceUsageList.componentType = GprsServiceUsage()


class GprsServiceUsed(univ.Sequence):
    pass


GprsServiceUsed.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 121))
GprsServiceUsed.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('gprsServiceUsageList', GprsServiceUsageList()),
    namedtype.OptionalNamedType('chargingTimeStamp', ChargingTimeStamp()),
    namedtype.OptionalNamedType('chargeInformationList', ChargeInformationList())
)


class GprsCall(univ.Sequence):
    pass


GprsCall.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 14))
GprsCall.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('typeOfControllingNode', TypeOfControllingNode()),
    namedtype.OptionalNamedType('gprsBasicCallInformation', GprsBasicCallInformation()),
    namedtype.OptionalNamedType('gprsLocationInformation', GprsLocationInformation()),
    namedtype.OptionalNamedType('equipmentInformation', EquipmentInformation()),
    namedtype.OptionalNamedType('gprsServiceUsed', GprsServiceUsed()),
    namedtype.OptionalNamedType('camelServiceUsed', CamelServiceUsed()),
    namedtype.OptionalNamedType('valueAddedServiceUsedList', ValueAddedServiceUsedList()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class MobileTerminatedCall(univ.Sequence):
    pass


MobileTerminatedCall.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 10))
MobileTerminatedCall.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('basicCallInformation', MtBasicCallInformation()),
    namedtype.OptionalNamedType('locationInformation', LocationInformation()),
    namedtype.OptionalNamedType('equipmentInformation', EquipmentInformation()),
    namedtype.OptionalNamedType('basicServiceUsedList', BasicServiceUsedList()),
    namedtype.OptionalNamedType('supplServiceUsedList', SupplServiceUsedList()),
    namedtype.OptionalNamedType('camelServiceUsed', CamelServiceUsed()),
    namedtype.OptionalNamedType('valueAddedServiceUsedList', ValueAddedServiceUsedList()),
    namedtype.OptionalNamedType('dualServiceRequested', DualServiceCode()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class CallEventDetail(univ.Choice):
    pass


CallEventDetail.componentType = namedtype.NamedTypes(
    namedtype.NamedType('mobileOriginatedCall', MobileOriginatedCall()),
    namedtype.NamedType('mobileTerminatedCall', MobileTerminatedCall()),
    namedtype.NamedType('supplServiceEvent', SupplServiceEvent()),
    namedtype.NamedType('serviceCentreUsage', ServiceCentreUsage()),
    namedtype.NamedType('valueAddedService', ValueAddedService()),
    namedtype.NamedType('gprsCall', GprsCall()),
    namedtype.NamedType('contentTransaction', ContentTransaction())
)


class GsnAddress(IpAddress):
    pass


class TotalChargeRefund(AbsoluteAmount):
    pass


TotalChargeRefund.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 355))


class TotalDiscountRefund(AbsoluteAmount):
    pass


TotalDiscountRefund.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 354))


class RecEntityType(univ.Integer):
    pass


RecEntityType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 186))


class RecEntityId(univ.Choice):
    pass


RecEntityId.componentType = namedtype.NamedTypes(
    namedtype.NamedType('mscId', MscId()),
    namedtype.NamedType('msisdn', Msisdn()),
    namedtype.NamedType('gsnaddress', GsnAddress())
)


class RecEntityDefinition(univ.Sequence):
    pass


RecEntityDefinition.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 183))
RecEntityDefinition.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('recEntityCode', RecEntityCode()),
    namedtype.OptionalNamedType('recEntityType', RecEntityType()),
    namedtype.OptionalNamedType('recEntityId', RecEntityId())
)


class TotalChargeValue(univ.Sequence):
    pass


TotalChargeValue.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 222))
TotalChargeValue.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('chargeType', ChargeType()),
    namedtype.OptionalNamedType('totalCharge', AbsoluteAmount()),
    namedtype.OptionalNamedType('totalChargeRefund', TotalChargeRefund())
)


class TotalChargeValueList(univ.SequenceOf):
    pass


TotalChargeValueList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 224))
TotalChargeValueList.componentType = TotalChargeValue()


class CallEventDetailsCount(univ.Integer):
    pass


CallEventDetailsCount.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 43))


class EarliestCallTimeStamp(DateTimeLong):
    pass


EarliestCallTimeStamp.tagSet = DateTimeLong.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 101))


class TotalAdvisedCharge(AbsoluteAmount):
    pass


TotalAdvisedCharge.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 356))


class TotalAdvisedChargeRefund(AbsoluteAmount):
    pass


TotalAdvisedChargeRefund.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 357))


class TotalCommissionRefund(AbsoluteAmount):
    pass


TotalCommissionRefund.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 359))


class TotalCommission(AbsoluteAmount):
    pass


TotalCommission.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 358))


class TotalAdvisedChargeValue(univ.Sequence):
    pass


TotalAdvisedChargeValue.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 360))
TotalAdvisedChargeValue.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('advisedChargeCurrency', AdvisedChargeCurrency()),
    namedtype.OptionalNamedType('totalAdvisedCharge', TotalAdvisedCharge()),
    namedtype.OptionalNamedType('totalAdvisedChargeRefund', TotalAdvisedChargeRefund()),
    namedtype.OptionalNamedType('totalCommission', TotalCommission()),
    namedtype.OptionalNamedType('totalCommissionRefund', TotalCommissionRefund())
)


class TotalAdvisedChargeValueList(univ.SequenceOf):
    pass


TotalAdvisedChargeValueList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 361))
TotalAdvisedChargeValueList.componentType = TotalAdvisedChargeValue()


class AuditControlInfo(univ.Sequence):
    pass


AuditControlInfo.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 15))
AuditControlInfo.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('earliestCallTimeStamp', EarliestCallTimeStamp()),
    namedtype.OptionalNamedType('latestCallTimeStamp', LatestCallTimeStamp()),
    namedtype.OptionalNamedType('totalChargeValueList', TotalChargeValueList()),
    namedtype.OptionalNamedType('totalTaxRefund', TotalTaxRefund()),
    namedtype.OptionalNamedType('totalTaxValue', TotalTaxValue()),
    namedtype.OptionalNamedType('totalDiscountValue', TotalDiscountValue()),
    namedtype.OptionalNamedType('totalDiscountRefund', TotalDiscountRefund()),
    namedtype.OptionalNamedType('totalAdvisedChargeValueList', TotalAdvisedChargeValueList()),
    namedtype.OptionalNamedType('callEventDetailsCount', CallEventDetailsCount()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInfoList())
)


class CountryCodeTable(univ.SequenceOf):
    pass


CountryCodeTable.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 78))
CountryCodeTable.componentType = CountryCode()


class CallEventDetailList(univ.SequenceOf):
    pass


CallEventDetailList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 3))
CallEventDetailList.componentType = CallEventDetail()


class MessageDescription(AsciiString):
    pass


MessageDescription.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 142))


class MessageDescriptionDefinition(univ.Sequence):
    pass


MessageDescriptionDefinition.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 143))
MessageDescriptionDefinition.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('messageDescriptionCode', MessageDescriptionCode()),
    namedtype.OptionalNamedType('messageDescription', MessageDescription())
)


class VasInfo(univ.SequenceOf):
    pass


VasInfo.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 7))
VasInfo.componentType = VasDefinition()


class MessageDescriptionInfo(univ.SequenceOf):
    pass


MessageDescriptionInfo.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 8))
MessageDescriptionInfo.componentType = MessageDescriptionDefinition()


class Iac(NumberString):
    pass


Iac.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 126))


class IacTable(univ.SequenceOf):
    pass


IacTable.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 127))
IacTable.componentType = Iac()


class CalledNumAnalysis(univ.Sequence):
    pass


CalledNumAnalysis.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 246))
CalledNumAnalysis.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('calledNumAnalysisCode', CalledNumAnalysisCode()),
    namedtype.OptionalNamedType('countryCodeTable', CountryCodeTable()),
    namedtype.OptionalNamedType('iacTable', IacTable())
)


class CalledNumAnalysisList(univ.SequenceOf):
    pass


CalledNumAnalysisList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 249))
CalledNumAnalysisList.componentType = CalledNumAnalysis()


class RecEntityTable(univ.SequenceOf):
    pass


RecEntityTable.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 188))
RecEntityTable.componentType = RecEntityDefinition()


class NetworkInfo(univ.Sequence):
    pass


NetworkInfo.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 6))
NetworkInfo.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('utcTimeOffsetInfo', UtcTimeOffsetInfo()),
    namedtype.OptionalNamedType('recEntityInfo', RecEntityTable()),
    namedtype.OptionalNamedType('networkType', NetworkType()),
    namedtype.OptionalNamedType('calledNumAnalysis', CalledNumAnalysisList())
)


class TransferBatch(univ.Sequence):
    pass


TransferBatch.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 1))
TransferBatch.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('batchControlInfo', BatchControlInfo()),
    namedtype.OptionalNamedType('accountingInfo', AccountingInfo()),
    namedtype.OptionalNamedType('networkInfo', NetworkInfo()),
    namedtype.OptionalNamedType('vasInfo', VasInfo()),
    namedtype.OptionalNamedType('messageDescriptionInfo', MessageDescriptionInfo()),
    namedtype.OptionalNamedType('callEventDetails', CallEventDetailList()),
    namedtype.OptionalNamedType('auditControlInfo', AuditControlInfo())
)


class DataInterChange(univ.Choice):
    pass


DataInterChange.componentType = namedtype.NamedTypes(
    namedtype.NamedType('transferBatch', TransferBatch()),
    namedtype.NamedType('notification', Notification())
)


