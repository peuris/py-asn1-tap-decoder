# Auto-generated by asn1ate on 2016-05-24 12:56:52.319298
from pyasn1.type import univ, char, namedtype, namedval, tag, constraint, useful


class AsciiString(univ.OctetString):
    pass


class ChargingPoint(AsciiString):
    pass


ChargingPoint.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 73))


class Code(univ.Integer):
    pass


Code.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 243))


class UtcTimeOffsetCode(Code):
    pass


UtcTimeOffsetCode.tagSet = Code.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 232))


class NumberString(univ.OctetString):
    pass


class LocalTimeStamp(NumberString):
    pass


LocalTimeStamp.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 16))


class DateTime(univ.Sequence):
    pass


DateTime.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 83))
DateTime.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('localTimeStamp', LocalTimeStamp()),
    namedtype.OptionalNamedType('utcTimeOffsetCode', UtcTimeOffsetCode())
)


class CompletionTimeStamp(DateTime):
    pass


CompletionTimeStamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 76))


class DepositTimeStamp(DateTime):
    pass


DepositTimeStamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 88))


class ScuTimeStamps(univ.Sequence):
    pass


ScuTimeStamps.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 193))
ScuTimeStamps.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('depositTimeStamp', DepositTimeStamp()),
    namedtype.OptionalNamedType('completionTimeStamp', CompletionTimeStamp()),
    namedtype.OptionalNamedType('chargingPoint', ChargingPoint())
)


class Currency(univ.OctetString):
    pass


class LocalCurrency(Currency):
    pass


LocalCurrency.tagSet = Currency.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 135))


class DiscountCode(univ.Integer):
    pass


DiscountCode.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 91))


class AbsoluteAmount(univ.Integer):
    pass


AbsoluteAmount.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 241))


class DiscountValue(AbsoluteAmount):
    pass


DiscountValue.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 93))


class PercentageRate(univ.Integer):
    pass


class DiscountRate(PercentageRate):
    pass


DiscountRate.tagSet = PercentageRate.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 92))


class DiscountApplied(univ.Choice):
    pass


DiscountApplied.componentType = namedtype.NamedTypes(
    namedtype.NamedType('fixedDiscountValue', DiscountValue()),
    namedtype.NamedType('discountRate', DiscountRate())
)


class DiscountDefinition(univ.Sequence):
    pass


DiscountDefinition.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 94))
DiscountDefinition.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('discountCode', DiscountCode()),
    namedtype.OptionalNamedType('discountApplied', DiscountApplied())
)


class Discounting(univ.SequenceOf):
    pass


Discounting.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 95))
Discounting.componentType = DiscountDefinition()


class Bid(AsciiString):
    pass


Bid.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 242))


class ServingBid(Bid):
    pass


ServingBid.tagSet = Bid.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 198))


class CellId(univ.Integer):
    pass


CellId.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 59))


class QoSDelay(univ.Integer):
    pass


QoSDelay.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 171))


class QoSPeakThroughput(univ.Integer):
    pass


QoSPeakThroughput.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 174))


class QoSPrecedence(univ.Integer):
    pass


QoSPrecedence.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 175))


class QoSMeanThroughput(univ.Integer):
    pass


QoSMeanThroughput.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 173))


class QoSReliability(univ.Integer):
    pass


QoSReliability.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 176))


class QoSInformation(univ.Sequence):
    pass


QoSInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 172))
QoSInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('delay', QoSDelay()),
    namedtype.OptionalNamedType('meanThroughput', QoSMeanThroughput()),
    namedtype.OptionalNamedType('peakThroughput', QoSPeakThroughput()),
    namedtype.OptionalNamedType('precedence', QoSPrecedence()),
    namedtype.OptionalNamedType('reliability', QoSReliability())
)


class QoSUsed(QoSInformation):
    pass


QoSUsed.tagSet = QoSInformation.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 178))


class InitiatingParty(univ.Integer):
    pass


InitiatingParty.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 130))


class PlmnId(AsciiString):
    pass


PlmnId.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 169))


class FileTypeIndicator(AsciiString):
    pass


FileTypeIndicator.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 110))


class Description(univ.OctetString):
    pass


class ChargingId(univ.OctetString):
    pass


ChargingId.tagSet = univ.OctetString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 72))


class ChannelCoding(univ.Integer):
    pass


ChannelCoding.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 60))


class LocationArea(univ.Integer):
    pass


LocationArea.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 136))


class RecEntityCode(Code):
    pass


RecEntityCode.tagSet = Code.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 184))


class RecEntityCodeList(univ.SequenceOf):
    pass


RecEntityCodeList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 185))
RecEntityCodeList.componentType = RecEntityCode()


class GprsNetworkLocation(univ.Sequence):
    pass


GprsNetworkLocation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 118))
GprsNetworkLocation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('recEntity', RecEntityCodeList()),
    namedtype.OptionalNamedType('locationArea', LocationArea()),
    namedtype.OptionalNamedType('cellId', CellId())
)


class Latitude(univ.Integer):
    pass


Latitude.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 134))


class LocationDescription(AsciiString):
    pass


LocationDescription.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 137))


class Longitude(univ.Integer):
    pass


Longitude.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 139))


class GeographicalLocation(univ.Sequence):
    pass


GeographicalLocation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 113))
GeographicalLocation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('servingBid', ServingBid()),
    namedtype.OptionalNamedType('servingLocationDescription', LocationDescription()),
    namedtype.OptionalNamedType('longitude', Longitude()),
    namedtype.OptionalNamedType('latitude', Latitude())
)


class HomeBid(Bid):
    pass


HomeBid.tagSet = Bid.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 122))


class HomeLocationInformation(univ.Sequence):
    pass


HomeLocationInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 123))
HomeLocationInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('homeBid', HomeBid()),
    namedtype.OptionalNamedType('homeLocationDescription', LocationDescription())
)


class GprsLocationInformation(univ.Sequence):
    pass


GprsLocationInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 117))
GprsLocationInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('gprsNetworkLocation', GprsNetworkLocation()),
    namedtype.OptionalNamedType('homeLocationInformation', HomeLocationInformation()),
    namedtype.OptionalNamedType('geographicalLocation', GeographicalLocation())
)


class Fnur(univ.Integer):
    pass


Fnur.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 111))


class IPTextV4Address(AsciiString):
    pass


IPTextV4Address.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 131))


class NumberOfDecimalPlaces(univ.Integer):
    pass


NumberOfDecimalPlaces.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 159))


class ChannelCodingsAcceptable(univ.SequenceOf):
    pass


ChannelCodingsAcceptable.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 61))
ChannelCodingsAcceptable.componentType = ChannelCoding()


class ExchangeRate(univ.Integer):
    pass


ExchangeRate.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 104))


class TypeOfNumber(univ.Integer):
    pass


TypeOfNumber.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 230))


class BCDString(univ.OctetString):
    pass


class AddressStringDigits(BCDString):
    pass


AddressStringDigits.tagSet = BCDString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 33))


class NumberingPlan(univ.Integer):
    pass


NumberingPlan.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 160))


class CamelDestination(univ.Sequence):
    pass


CamelDestination.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 51))
CamelDestination.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('typeOfNumber', TypeOfNumber()),
    namedtype.OptionalNamedType('numberingPlan', NumberingPlan()),
    namedtype.OptionalNamedType('camelDestinationNumber', AddressStringDigits())
)


class ChargedPartyStatus(univ.Integer):
    pass


ChargedPartyStatus.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 67))


class ModificationIndicator(univ.Integer):
    pass


ModificationIndicator.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 149))


class CalledNumAnalysisCode(Code):
    pass


CalledNumAnalysisCode.tagSet = Code.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 247))


class NonChargedParty(univ.Sequence):
    pass


NonChargedParty.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 158))
NonChargedParty.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('typeOfNumber', TypeOfNumber()),
    namedtype.OptionalNamedType('numberingPlan', NumberingPlan()),
    namedtype.OptionalNamedType('nonChargedNumber', AddressStringDigits()),
    namedtype.OptionalNamedType('calledNumAnalysisCode', CalledNumAnalysisCode()),
    namedtype.OptionalNamedType('modificationIndicator', ModificationIndicator())
)


class ClirIndicator(univ.Integer):
    pass


ClirIndicator.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 75))


class Msisdn(BCDString):
    pass


Msisdn.tagSet = BCDString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 152))


class Imsi(BCDString):
    pass


Imsi.tagSet = BCDString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 129))


class SimChargeableSubscriber(univ.Sequence):
    pass


SimChargeableSubscriber.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 199))
SimChargeableSubscriber.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('imsi', Imsi()),
    namedtype.OptionalNamedType('msisdn', Msisdn())
)


class Min(NumberString):
    pass


Min.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 146))


class ScuVasChargeableSubscriber(univ.Choice):
    pass


ScuVasChargeableSubscriber.componentType = namedtype.NamedTypes(
    namedtype.NamedType('simChargeableSubscriber', SimChargeableSubscriber()),
    namedtype.NamedType('msisdn', Msisdn()),
    namedtype.NamedType('min', Min())
)


class NetworkId(AsciiString):
    pass


NetworkId.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 155))


class OriginatingNetwork(NetworkId):
    pass


OriginatingNetwork.tagSet = NetworkId.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 164))


class DestinationNetwork(NetworkId):
    pass


DestinationNetwork.tagSet = NetworkId.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 90))


class ScuBasicInformation(univ.Sequence):
    pass


ScuBasicInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 191))
ScuBasicInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('chargeableSubscriber', ScuVasChargeableSubscriber()),
    namedtype.OptionalNamedType('chargedPartyStatus', ChargedPartyStatus()),
    namedtype.OptionalNamedType('nonChargedParty', NonChargedParty()),
    namedtype.OptionalNamedType('clirIndicator', ClirIndicator()),
    namedtype.OptionalNamedType('originatingNetwork', OriginatingNetwork()),
    namedtype.OptionalNamedType('destinationNetwork', DestinationNetwork())
)


class Charge(AbsoluteAmount):
    pass


Charge.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 62))


class FileSequenceNumber(NumberString):
    pass


FileSequenceNumber.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 109))


class CamelInitiatedCFIndicator(univ.Integer):
    pass


CamelInitiatedCFIndicator.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 52))


class TapCurrency(Currency):
    pass


TapCurrency.tagSet = Currency.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 210))


class MessageType(univ.Integer):
    pass


MessageType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 145))


class MessageDescriptionCode(Code):
    pass


MessageDescriptionCode.tagSet = Code.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 141))


class PriorityCode(univ.Integer):
    pass


PriorityCode.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 170))


class DistanceChargeBandCode(AsciiString):
    pass


DistanceChargeBandCode.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 98))


class MessageStatus(univ.Integer):
    pass


MessageStatus.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 144))


class ScuChargeType(univ.Sequence):
    pass


ScuChargeType.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 192))
ScuChargeType.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('messageStatus', MessageStatus()),
    namedtype.OptionalNamedType('priorityCode', PriorityCode()),
    namedtype.OptionalNamedType('distanceChargeBandCode', DistanceChargeBandCode()),
    namedtype.OptionalNamedType('messageType', MessageType()),
    namedtype.OptionalNamedType('messageDescriptionCode', MessageDescriptionCode())
)


class HexString(univ.OctetString):
    pass


class TeleServiceCode(HexString):
    pass


TeleServiceCode.tagSet = HexString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 218))


class BearerServiceCode(HexString):
    pass


BearerServiceCode.tagSet = HexString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 40))


class BasicServiceCode(univ.Choice):
    pass


BasicServiceCode.componentType = namedtype.NamedTypes(
    namedtype.NamedType('teleServiceCode', TeleServiceCode()),
    namedtype.NamedType('bearerServiceCode', BearerServiceCode())
)


class BasicServiceCodeList(univ.SequenceOf):
    pass


BasicServiceCodeList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 37))
BasicServiceCodeList.componentType = BasicServiceCode()


class TimeBand(AsciiString):
    pass


TimeBand.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 220))


class ChargeableUnits(univ.Integer):
    pass


ChargeableUnits.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 65))


class ChargedUnits(univ.Integer):
    pass


ChargedUnits.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 68))


class DayCategorySubtype(AsciiString):
    pass


DayCategorySubtype.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 86))


class DayCategory(AsciiString):
    pass


DayCategory.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 85))


class MultiRateIndicator(univ.Integer):
    pass


MultiRateIndicator.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 154))


class ChargeType(NumberString):
    pass


ChargeType.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 71))


class ChargingTimeStamp(DateTime):
    pass


ChargingTimeStamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 74))


class TimeBandSubtype(AsciiString):
    pass


TimeBandSubtype.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 221))


class ChargeDetail(univ.Sequence):
    pass


ChargeDetail.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 63))
ChargeDetail.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('chargeType', ChargeType()),
    namedtype.OptionalNamedType('charge', Charge()),
    namedtype.OptionalNamedType('chargeableUnits', ChargeableUnits()),
    namedtype.OptionalNamedType('chargedUnits', ChargedUnits()),
    namedtype.OptionalNamedType('chargeDetailTimeStamp', ChargingTimeStamp()),
    namedtype.OptionalNamedType('dayCategory', DayCategory()),
    namedtype.OptionalNamedType('dayCategorySubtype', DayCategorySubtype()),
    namedtype.OptionalNamedType('timeBand', TimeBand()),
    namedtype.OptionalNamedType('timeBandSubtype', TimeBandSubtype()),
    namedtype.OptionalNamedType('multiRateIndicator', MultiRateIndicator())
)


class AiurRequested(univ.Integer):
    pass


AiurRequested.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 34))


class NumberOfChannels(univ.Integer):
    pass


NumberOfChannels.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 161))


class NumberOfChannelsUsed(univ.Integer):
    pass


NumberOfChannelsUsed.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 252))


class BasicHSCSDParameters(univ.Sequence):
    pass


BasicHSCSDParameters.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 35))
BasicHSCSDParameters.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('fnur', Fnur()),
    namedtype.OptionalNamedType('aiur', AiurRequested()),
    namedtype.OptionalNamedType('maxNumberOfChannels', NumberOfChannels()),
    namedtype.OptionalNamedType('channelCodingsAcceptable', ChannelCodingsAcceptable()),
    namedtype.OptionalNamedType('channelCodingUsed', ChannelCoding()),
    namedtype.OptionalNamedType('numberOfChannelsUsed', NumberOfChannelsUsed())
)


class ModificationTimestamp(DateTime):
    pass


ModificationTimestamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 150))


class HSCSDParameterModification(univ.Sequence):
    pass


HSCSDParameterModification.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 125))
HSCSDParameterModification.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('aiur', AiurRequested()),
    namedtype.OptionalNamedType('maxNumberOfChannels', NumberOfChannels()),
    namedtype.OptionalNamedType('channelCodingUsed', ChannelCoding()),
    namedtype.OptionalNamedType('numberOfChannelsUsed', NumberOfChannelsUsed()),
    namedtype.OptionalNamedType('initiatingParty', InitiatingParty()),
    namedtype.OptionalNamedType('modificationTimestamp', ModificationTimestamp())
)


class HSCSDParameterModificationList(univ.SequenceOf):
    pass


HSCSDParameterModificationList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 140))
HSCSDParameterModificationList.componentType = HSCSDParameterModification()


class HSCSDInformation(univ.Sequence):
    pass


HSCSDInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 124))
HSCSDInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('basicHSCSDParameters', BasicHSCSDParameters()),
    namedtype.OptionalNamedType('hSCSDParameterModificationList', HSCSDParameterModificationList())
)


class PdpType(univ.Integer):
    pass


PdpType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 168))


class PacketDataProtocolAddress(AsciiString):
    pass


PacketDataProtocolAddress.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 165))


class PdpAddress(PacketDataProtocolAddress):
    pass


PdpAddress.tagSet = PacketDataProtocolAddress.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 167))


class GprsChargeableSubscriber(univ.Sequence):
    pass


GprsChargeableSubscriber.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 115))
GprsChargeableSubscriber.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('imsi', Imsi()),
    namedtype.OptionalNamedType('msisdn', Msisdn()),
    namedtype.OptionalNamedType('pdpType', PdpType()),
    namedtype.OptionalNamedType('pdpAddress', PdpAddress())
)


class TotalCallEventDuration(univ.Integer):
    pass


TotalCallEventDuration.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 223))


class CauseForTerm(univ.Integer):
    pass


CauseForTerm.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 58))


class FraudMonitorIndicator(AsciiString):
    pass


FraudMonitorIndicator.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 112))


class CallEventStartTimeStamp(DateTime):
    pass


CallEventStartTimeStamp.tagSet = DateTime.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 44))


class PartialTypeIndicator(AsciiString):
    pass


PartialTypeIndicator.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 166))


class NetworkInitPDPContext(univ.Integer):
    pass


NetworkInitPDPContext.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 245))


class NetworkType(univ.Integer):
    pass


NetworkType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 157))


class RapFileSequenceNumber(FileSequenceNumber):
    pass


RapFileSequenceNumber.tagSet = FileSequenceNumber.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 181))


class AccessPointName(AsciiString):
    pass


AccessPointName.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 32))


class RemotePdpAddressList(univ.SequenceOf):
    pass


RemotePdpAddressList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 190))
RemotePdpAddressList.componentType = PacketDataProtocolAddress()


class GprsDestination(univ.Sequence):
    pass


GprsDestination.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 116))
GprsDestination.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('accessPointName', AccessPointName()),
    namedtype.OptionalNamedType('remotePdpAddressList', RemotePdpAddressList())
)


class GprsBasicCallInformation(univ.Sequence):
    pass


GprsBasicCallInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 114))
GprsBasicCallInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('fraudMonitorIndicator', FraudMonitorIndicator()),
    namedtype.OptionalNamedType('chargeableSubscriber', GprsChargeableSubscriber()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('networkType', NetworkType()),
    namedtype.OptionalNamedType('gprsDestination', GprsDestination()),
    namedtype.OptionalNamedType('callEventStartTimeStamp', CallEventStartTimeStamp()),
    namedtype.OptionalNamedType('totalCallEventDuration', TotalCallEventDuration()),
    namedtype.OptionalNamedType('causeForTerm', CauseForTerm()),
    namedtype.OptionalNamedType('partialTypeIndicator', PartialTypeIndicator()),
    namedtype.OptionalNamedType('networkInitPDPContext', NetworkInitPDPContext()),
    namedtype.OptionalNamedType('chargingId', ChargingId())
)


class ChargeDetailList(univ.SequenceOf):
    pass


ChargeDetailList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 64))
ChargeDetailList.componentType = ChargeDetail()


class SimToolkitIndicator(AsciiString):
    pass


SimToolkitIndicator.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 200))


class DataVolumeReference(univ.Integer):
    pass


DataVolumeReference.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 82))


class OperatorSpecInformation(AsciiString):
    pass


OperatorSpecInformation.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 163))


class TypeOfControllingNode(univ.Integer):
    pass


TypeOfControllingNode.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 229))


class Imei(BCDString):
    pass


Imei.tagSet = BCDString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 128))


class Esn(NumberString):
    pass


Esn.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 103))


class ImeiOrEsn(univ.Choice):
    pass


ImeiOrEsn.componentType = namedtype.NamedTypes(
    namedtype.NamedType('imei', Imei()),
    namedtype.NamedType('esn', Esn())
)


class MobileStationClassMark(univ.Integer):
    pass


MobileStationClassMark.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 148))


class EquipmentInformation(univ.Sequence):
    pass


EquipmentInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 102))
EquipmentInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('mobileStationClassMark', MobileStationClassMark()),
    namedtype.OptionalNamedType('imeiOrEsn', ImeiOrEsn())
)


class VasCode(Code):
    pass


VasCode.tagSet = Code.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 237))


class CallType(AsciiString):
    pass


CallType.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 47))


class ChargedItem(AsciiString):
    pass


ChargedItem.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 66))


class TaxCode(univ.Integer):
    pass


TaxCode.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 212))


class TaxInformation(univ.Sequence):
    pass


TaxInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 213))
TaxInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('taxCode', TaxCode()),
    namedtype.OptionalNamedType('taxValue', Charge())
)


class TaxInformationList(univ.SequenceOf):
    pass


TaxInformationList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 214))
TaxInformationList.componentType = TaxInformation()


class CallTypeSubtype(AsciiString):
    pass


CallTypeSubtype.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 48))


class DiscountInformation(univ.Sequence):
    pass


DiscountInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 96))
DiscountInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('discountCode', DiscountCode()),
    namedtype.OptionalNamedType('discount', DiscountValue())
)


class ExchangeRateCode(Code):
    pass


ExchangeRateCode.tagSet = Code.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 105))


class ChargeInformation(univ.Sequence):
    pass


ChargeInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 69))
ChargeInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('chargedItem', ChargedItem()),
    namedtype.OptionalNamedType('exchangeRateCode', ExchangeRateCode()),
    namedtype.OptionalNamedType('callType', CallType()),
    namedtype.OptionalNamedType('callTypeSubtype', CallTypeSubtype()),
    namedtype.OptionalNamedType('chargeDetailList', ChargeDetailList()),
    namedtype.OptionalNamedType('taxInformation', TaxInformationList()),
    namedtype.OptionalNamedType('discountInformation', DiscountInformation())
)


class ValueAddedServiceUsed(univ.Sequence):
    pass


ValueAddedServiceUsed.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 236))
ValueAddedServiceUsed.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('vasCode', VasCode()),
    namedtype.OptionalNamedType('chargingTimeStamp', ChargingTimeStamp()),
    namedtype.OptionalNamedType('chargeInformation', ChargeInformation())
)


class ValueAddedServiceUsedList(univ.SequenceOf):
    pass


ValueAddedServiceUsedList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 235))
ValueAddedServiceUsedList.componentType = ValueAddedServiceUsed()


class DataVolume(univ.Integer):
    pass


DataVolume.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 81))


class DataVolumeOutgoing(DataVolume):
    pass


DataVolumeOutgoing.tagSet = DataVolume.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 251))


class DataVolumeIncoming(DataVolume):
    pass


DataVolumeIncoming.tagSet = DataVolume.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 250))


class QoSRequested(QoSInformation):
    pass


QoSRequested.tagSet = QoSInformation.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 177))


class GprsServiceUsage(univ.Sequence):
    pass


GprsServiceUsage.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 119))
GprsServiceUsage.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('gprsUsageTimeStamp', ChargingTimeStamp()),
    namedtype.OptionalNamedType('qosRequested', QoSRequested()),
    namedtype.OptionalNamedType('qosUsed', QoSUsed()),
    namedtype.OptionalNamedType('dataVolumeIncoming', DataVolumeIncoming()),
    namedtype.OptionalNamedType('dataVolumeOutgoing', DataVolumeOutgoing())
)


class GprsServiceUsageList(univ.SequenceOf):
    pass


GprsServiceUsageList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 120))
GprsServiceUsageList.componentType = GprsServiceUsage()


class ChargeInformationList(univ.SequenceOf):
    pass


ChargeInformationList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 70))
ChargeInformationList.componentType = ChargeInformation()


class GprsServiceUsed(univ.Sequence):
    pass


GprsServiceUsed.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 121))
GprsServiceUsed.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('gprsServiceUsageList', GprsServiceUsageList()),
    namedtype.OptionalNamedType('chargingTimeStamp', ChargingTimeStamp()),
    namedtype.OptionalNamedType('chargeInformationList', ChargeInformationList())
)


class GprsCall(univ.Sequence):
    pass


GprsCall.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 14))
GprsCall.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('typeOfControllingNode', TypeOfControllingNode()),
    namedtype.OptionalNamedType('gprsBasicCallInformation', GprsBasicCallInformation()),
    namedtype.OptionalNamedType('gprsLocationInformation', GprsLocationInformation()),
    namedtype.OptionalNamedType('equipmentInformation', EquipmentInformation()),
    namedtype.OptionalNamedType('gprsServiceUsed', GprsServiceUsed()),
    namedtype.OptionalNamedType('valueAddedServiceUsedList', ValueAddedServiceUsedList()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInformation())
)


class ChargeableSubscriber(univ.Choice):
    pass


ChargeableSubscriber.componentType = namedtype.NamedTypes(
    namedtype.NamedType('simChargeableSubscriber', SimChargeableSubscriber()),
    namedtype.NamedType('min', Min())
)


class CallOriginator(univ.Sequence):
    pass


CallOriginator.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 41))
CallOriginator.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('typeOfNumber', TypeOfNumber()),
    namedtype.OptionalNamedType('numberingPlan', NumberingPlan()),
    namedtype.OptionalNamedType('callingNumber', AddressStringDigits()),
    namedtype.OptionalNamedType('modificationIndicator', ModificationIndicator()),
    namedtype.OptionalNamedType('clirIndicator', ClirIndicator())
)


class MtBasicCallInformation(univ.Sequence):
    pass


MtBasicCallInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 153))
MtBasicCallInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('fraudMonitorIndicator', FraudMonitorIndicator()),
    namedtype.OptionalNamedType('chargeableSubscriber', ChargeableSubscriber()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('networkType', NetworkType()),
    namedtype.OptionalNamedType('callOriginator', CallOriginator()),
    namedtype.OptionalNamedType('originatingNetwork', OriginatingNetwork()),
    namedtype.OptionalNamedType('callEventStartTimeStamp', CallEventStartTimeStamp()),
    namedtype.OptionalNamedType('totalCallEventDuration', TotalCallEventDuration()),
    namedtype.OptionalNamedType('simToolkitIndicator', SimToolkitIndicator()),
    namedtype.OptionalNamedType('causeForTerm', CauseForTerm())
)


class VasDescription(Description):
    pass


VasDescription.tagSet = Description.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 239))


class VasShortDescription(Description):
    pass


VasShortDescription.tagSet = Description.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 240))


class VasDefinition(univ.Sequence):
    pass


VasDefinition.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 238))
VasDefinition.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('vasCode', VasCode()),
    namedtype.OptionalNamedType('vasShortDesc', VasShortDescription()),
    namedtype.OptionalNamedType('vasDesc', VasDescription())
)


class CamelModification(univ.Integer):
    pass


CamelModification.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 53))


class ThirdPartyInformation(univ.Sequence):
    pass


ThirdPartyInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 219))
ThirdPartyInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('typeOfNumber', TypeOfNumber()),
    namedtype.OptionalNamedType('numberingPlan', NumberingPlan()),
    namedtype.OptionalNamedType('thirdPartyNumber', AddressStringDigits()),
    namedtype.OptionalNamedType('modificationIndicator', ModificationIndicator()),
    namedtype.OptionalNamedType('clirIndicator', ClirIndicator())
)


class SupplServiceCode(HexString):
    pass


SupplServiceCode.tagSet = HexString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 209))


class SupplServiceActionCode(univ.Integer):
    pass


SupplServiceActionCode.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 208))


class SsParameters(AsciiString):
    pass


SsParameters.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 204))


class SupplServiceUsed(univ.Sequence):
    pass


SupplServiceUsed.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 206))
SupplServiceUsed.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('supplServiceCode', SupplServiceCode()),
    namedtype.OptionalNamedType('supplServiceActionCode', SupplServiceActionCode()),
    namedtype.OptionalNamedType('ssParameters', SsParameters()),
    namedtype.OptionalNamedType('thirdPartyInformation', ThirdPartyInformation()),
    namedtype.OptionalNamedType('chargingTimeStamp', ChargingTimeStamp()),
    namedtype.OptionalNamedType('chargeInformation', ChargeInformation()),
    namedtype.OptionalNamedType('basicServiceCodeList', BasicServiceCodeList())
)


class TapDecimalPlaces(univ.Integer):
    pass


TapDecimalPlaces.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 244))


class TaxType(AsciiString):
    pass


TaxType.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 217))


class TaxRate(NumberString):
    pass


TaxRate.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 215))


class TaxRateDefinition(univ.Sequence):
    pass


TaxRateDefinition.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 216))
TaxRateDefinition.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('taxCode', TaxCode()),
    namedtype.OptionalNamedType('taxType', TaxType()),
    namedtype.OptionalNamedType('taxRate', TaxRate())
)


class Taxation(univ.SequenceOf):
    pass


Taxation.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 211))
Taxation.componentType = TaxRateDefinition()


class ExchangeRateDefinition(univ.Sequence):
    pass


ExchangeRateDefinition.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 106))
ExchangeRateDefinition.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('exchangeRateCode', ExchangeRateCode()),
    namedtype.OptionalNamedType('numberOfDecimalPlaces', NumberOfDecimalPlaces()),
    namedtype.OptionalNamedType('exchangeRate', ExchangeRate())
)


class CurrencyConversion(univ.SequenceOf):
    pass


CurrencyConversion.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 80))
CurrencyConversion.componentType = ExchangeRateDefinition()


class AccountingInfo(univ.Sequence):
    pass


AccountingInfo.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 5))
AccountingInfo.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('taxation', Taxation()),
    namedtype.OptionalNamedType('discounting', Discounting()),
    namedtype.OptionalNamedType('localCurrency', LocalCurrency()),
    namedtype.OptionalNamedType('tapCurrency', TapCurrency()),
    namedtype.OptionalNamedType('currencyConversion', CurrencyConversion()),
    namedtype.OptionalNamedType('tapDecimalPlaces', TapDecimalPlaces())
)


class CamelModificationList(univ.SequenceOf):
    pass


CamelModificationList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 54))
CamelModificationList.componentType = CamelModification()


class CallReference(univ.OctetString):
    pass


CallReference.tagSet = univ.OctetString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 45))


class NetworkLocation(univ.Sequence):
    pass


NetworkLocation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 156))
NetworkLocation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('recEntityCode', RecEntityCode()),
    namedtype.OptionalNamedType('callReference', CallReference()),
    namedtype.OptionalNamedType('locationArea', LocationArea()),
    namedtype.OptionalNamedType('cellId', CellId())
)


class LocationInformation(univ.Sequence):
    pass


LocationInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 138))
LocationInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('networkLocation', NetworkLocation()),
    namedtype.OptionalNamedType('homeLocationInformation', HomeLocationInformation()),
    namedtype.OptionalNamedType('geographicalLocation', GeographicalLocation())
)


class SupplServiceEvent(univ.Sequence):
    pass


SupplServiceEvent.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 11))
SupplServiceEvent.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('fraudMonitorIndicator', FraudMonitorIndicator()),
    namedtype.OptionalNamedType('chargeableSubscriber', ChargeableSubscriber()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('networkType', NetworkType()),
    namedtype.OptionalNamedType('locationInformation', LocationInformation()),
    namedtype.OptionalNamedType('equipmentInformation', EquipmentInformation()),
    namedtype.OptionalNamedType('supplServiceUsed', SupplServiceUsed()),
    namedtype.OptionalNamedType('simToolkitIndicator', SimToolkitIndicator()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInformation())
)


class TransparencyIndicator(univ.Integer):
    pass


TransparencyIndicator.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 228))


class SpeechVersion(univ.Integer):
    pass


class SpeechVersionRequested(SpeechVersion):
    pass


SpeechVersionRequested.tagSet = SpeechVersion.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 202))


class RadioChannelRequested(univ.Integer):
    pass


RadioChannelRequested.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 179))


class SpeechVersionUsed(SpeechVersion):
    pass


SpeechVersionUsed.tagSet = SpeechVersion.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 203))


class RadioChannelUsed(univ.Integer):
    pass


RadioChannelUsed.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 180))


class BasicService(univ.Sequence):
    pass


BasicService.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 36))
BasicService.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('serviceCode', BasicServiceCode()),
    namedtype.OptionalNamedType('radioChannelRequested', RadioChannelRequested()),
    namedtype.OptionalNamedType('radioChannelUsed', RadioChannelUsed()),
    namedtype.OptionalNamedType('speechVersionRequested', SpeechVersionRequested()),
    namedtype.OptionalNamedType('speechVersionUsed', SpeechVersionUsed()),
    namedtype.OptionalNamedType('transparencyIndicator', TransparencyIndicator())
)


class BasicServiceUsed(univ.Sequence):
    pass


BasicServiceUsed.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 39))
BasicServiceUsed.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('basicService', BasicService()),
    namedtype.OptionalNamedType('chargingTimeStamp', ChargingTimeStamp()),
    namedtype.OptionalNamedType('chargeInformationList', ChargeInformationList()),
    namedtype.OptionalNamedType('dataVolumeReference', DataVolumeReference()),
    namedtype.OptionalNamedType('hSCSDInformation', HSCSDInformation())
)


class BasicServiceUsedList(univ.SequenceOf):
    pass


BasicServiceUsedList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 38))
BasicServiceUsedList.componentType = BasicServiceUsed()


class SupplServiceUsedList(univ.SequenceOf):
    pass


SupplServiceUsedList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 207))
SupplServiceUsedList.componentType = SupplServiceUsed()


class CseInformation(univ.OctetString):
    pass


CseInformation.tagSet = univ.OctetString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 79))


class CamelServiceLevel(univ.Integer):
    pass


CamelServiceLevel.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 56))


class CamelCallReferenceNumber(HexString):
    pass


CamelCallReferenceNumber.tagSet = HexString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 50))


class CamelCallReference(univ.Sequence):
    pass


CamelCallReference.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 49))
CamelCallReference.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('typeOfNumber', TypeOfNumber()),
    namedtype.OptionalNamedType('numberingPlan', NumberingPlan()),
    namedtype.OptionalNamedType('mscAddress', AddressStringDigits()),
    namedtype.OptionalNamedType('callReferenceNumber', CamelCallReferenceNumber())
)


class DefaultCallHandlingIndicator(univ.Integer):
    pass


DefaultCallHandlingIndicator.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 87))


class CamelServiceKey(univ.Integer):
    pass


CamelServiceKey.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 55))


class CamelServiceUsed(univ.Sequence):
    pass


CamelServiceUsed.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 57))
CamelServiceUsed.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('typeOfNumber', TypeOfNumber()),
    namedtype.OptionalNamedType('numberingPlan', NumberingPlan()),
    namedtype.OptionalNamedType('camelServerAddress', AddressStringDigits()),
    namedtype.OptionalNamedType('camelServiceLevel', CamelServiceLevel()),
    namedtype.OptionalNamedType('camelServiceKey', CamelServiceKey()),
    namedtype.OptionalNamedType('defaultCallHandling', DefaultCallHandlingIndicator()),
    namedtype.OptionalNamedType('camelCallReference', CamelCallReference()),
    namedtype.OptionalNamedType('camelChargeInformation', ChargeInformation()),
    namedtype.OptionalNamedType('camelInitiatedCFIndicator', CamelInitiatedCFIndicator()),
    namedtype.OptionalNamedType('camelModificationList', CamelModificationList()),
    namedtype.OptionalNamedType('camelDestination', CamelDestination()),
    namedtype.OptionalNamedType('cseInformation', CseInformation())
)


class CalledRegion(AsciiString):
    pass


CalledRegion.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 46))


class CalledPlace(AsciiString):
    pass


CalledPlace.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 42))


class Destination(univ.Sequence):
    pass


Destination.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 89))
Destination.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('typeOfNumber', TypeOfNumber()),
    namedtype.OptionalNamedType('numberingPlan', NumberingPlan()),
    namedtype.OptionalNamedType('calledNumber', AddressStringDigits()),
    namedtype.OptionalNamedType('modificationIndicator', ModificationIndicator()),
    namedtype.OptionalNamedType('calledPlace', CalledPlace()),
    namedtype.OptionalNamedType('calledRegion', CalledRegion()),
    namedtype.OptionalNamedType('calledNumAnalysisCode', CalledNumAnalysisCode())
)


class MoBasicCallInformation(univ.Sequence):
    pass


MoBasicCallInformation.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 147))
MoBasicCallInformation.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('fraudMonitorIndicator', FraudMonitorIndicator()),
    namedtype.OptionalNamedType('chargeableSubscriber', ChargeableSubscriber()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('networkType', NetworkType()),
    namedtype.OptionalNamedType('destination', Destination()),
    namedtype.OptionalNamedType('destinationNetwork', DestinationNetwork()),
    namedtype.OptionalNamedType('callEventStartTimeStamp', CallEventStartTimeStamp()),
    namedtype.OptionalNamedType('totalCallEventDuration', TotalCallEventDuration()),
    namedtype.OptionalNamedType('simToolkitIndicator', SimToolkitIndicator()),
    namedtype.OptionalNamedType('causeForTerm', CauseForTerm())
)


class DualBearerServiceCode(HexString):
    pass


DualBearerServiceCode.tagSet = HexString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 99))


class DualTeleServiceCode(HexString):
    pass


DualTeleServiceCode.tagSet = HexString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 100))


class DualServiceCode(univ.Choice):
    pass


DualServiceCode.componentType = namedtype.NamedTypes(
    namedtype.NamedType('dualTeleServiceCode', DualTeleServiceCode()),
    namedtype.NamedType('dualBearerServiceCode', DualBearerServiceCode())
)


class MobileOriginatedCall(univ.Sequence):
    pass


MobileOriginatedCall.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 9))
MobileOriginatedCall.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('basicCallInformation', MoBasicCallInformation()),
    namedtype.OptionalNamedType('locationInformation', LocationInformation()),
    namedtype.OptionalNamedType('equipmentInformation', EquipmentInformation()),
    namedtype.OptionalNamedType('basicServiceUsedList', BasicServiceUsedList()),
    namedtype.OptionalNamedType('supplServiceUsedList', SupplServiceUsedList()),
    namedtype.OptionalNamedType('camelServiceUsed', CamelServiceUsed()),
    namedtype.OptionalNamedType('valueAddedServiceUsedList', ValueAddedServiceUsedList()),
    namedtype.OptionalNamedType('dualServiceRequested', DualServiceCode()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInformation())
)


class ValueAddedService(univ.Sequence):
    pass


ValueAddedService.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 13))
ValueAddedService.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('fraudMonitorIndicator', FraudMonitorIndicator()),
    namedtype.OptionalNamedType('chargeableSubscriber', ScuVasChargeableSubscriber()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('networkType', NetworkType()),
    namedtype.OptionalNamedType('valueAddedServiceUsed', ValueAddedServiceUsed()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInformation())
)


class ServiceCentreUsage(univ.Sequence):
    pass


ServiceCentreUsage.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 12))
ServiceCentreUsage.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('fraudMonitorIndicator', FraudMonitorIndicator()),
    namedtype.OptionalNamedType('basicInformation', ScuBasicInformation()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('networkType', NetworkType()),
    namedtype.OptionalNamedType('recEntityCode', RecEntityCode()),
    namedtype.OptionalNamedType('chargeInformation', ChargeInformation()),
    namedtype.OptionalNamedType('scuChargeType', ScuChargeType()),
    namedtype.OptionalNamedType('scuTimeStamps', ScuTimeStamps()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInformation())
)


class MobileTerminatedCall(univ.Sequence):
    pass


MobileTerminatedCall.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 10))
MobileTerminatedCall.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('basicCallInformation', MtBasicCallInformation()),
    namedtype.OptionalNamedType('locationInformation', LocationInformation()),
    namedtype.OptionalNamedType('equipmentInformation', EquipmentInformation()),
    namedtype.OptionalNamedType('basicServiceUsedList', BasicServiceUsedList()),
    namedtype.OptionalNamedType('supplServiceUsedList', SupplServiceUsedList()),
    namedtype.OptionalNamedType('camelServiceUsed', CamelServiceUsed()),
    namedtype.OptionalNamedType('valueAddedServiceUsedList', ValueAddedServiceUsedList()),
    namedtype.OptionalNamedType('dualServiceRequested', DualServiceCode()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInformation())
)


class CallEventDetail(univ.Choice):
    pass


CallEventDetail.componentType = namedtype.NamedTypes(
    namedtype.NamedType('mobileOriginatedCall', MobileOriginatedCall()),
    namedtype.NamedType('mobileTerminatedCall', MobileTerminatedCall()),
    namedtype.NamedType('supplServiceEvent', SupplServiceEvent()),
    namedtype.NamedType('serviceCentreUsage', ServiceCentreUsage()),
    namedtype.NamedType('valueAddedService', ValueAddedService()),
    namedtype.NamedType('gprsCall', GprsCall())
)


class CallEventDetailList(univ.SequenceOf):
    pass


CallEventDetailList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 3))
CallEventDetailList.componentType = CallEventDetail()


class UtcTimeOffset(AsciiString):
    pass


UtcTimeOffset.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 231))


class UtcTimeOffsetDefinition(univ.Sequence):
    pass


UtcTimeOffsetDefinition.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 233))
UtcTimeOffsetDefinition.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('utcTimeOffsetCode', UtcTimeOffsetCode()),
    namedtype.OptionalNamedType('utcTimeOffset', UtcTimeOffset())
)


class UtcTimeOffsetInfo(univ.SequenceOf):
    pass


UtcTimeOffsetInfo.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 234))
UtcTimeOffsetInfo.componentType = UtcTimeOffsetDefinition()


class CountryCode(NumberString):
    pass


CountryCode.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 77))


class CountryCodeTable(univ.SequenceOf):
    pass


CountryCodeTable.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 78))
CountryCodeTable.componentType = CountryCode()


class Iac(NumberString):
    pass


Iac.tagSet = NumberString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 126))


class IacTable(univ.SequenceOf):
    pass


IacTable.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 127))
IacTable.componentType = Iac()


class CalledNumAnalysis(univ.Sequence):
    pass


CalledNumAnalysis.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 246))
CalledNumAnalysis.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('calledNumAnalysisCode', CalledNumAnalysisCode()),
    namedtype.OptionalNamedType('countryCodeTable', CountryCodeTable()),
    namedtype.OptionalNamedType('iacTable', IacTable())
)


class CalledNumAnalysisList(univ.SequenceOf):
    pass


CalledNumAnalysisList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 249))
CalledNumAnalysisList.componentType = CalledNumAnalysis()


class RecEntityType(univ.Integer):
    pass


RecEntityType.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 186))


class MscId(AsciiString):
    pass


MscId.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 151))


class IPTextV6Address(AsciiString):
    pass


IPTextV6Address.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 132))


class IpAddress(univ.Choice):
    pass


IpAddress.componentType = namedtype.NamedTypes(
    namedtype.NamedType('iPTextV4Address', IPTextV4Address()),
    namedtype.NamedType('iPTextV6Address', IPTextV6Address())
)


class GsnAddress(IpAddress):
    pass


class RecEntityId(univ.Choice):
    pass


RecEntityId.componentType = namedtype.NamedTypes(
    namedtype.NamedType('mscId', MscId()),
    namedtype.NamedType('msisdn', Msisdn()),
    namedtype.NamedType('gsnaddress', GsnAddress())
)


class RecEntityDefinition(univ.Sequence):
    pass


RecEntityDefinition.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 183))
RecEntityDefinition.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('recEntityCode', RecEntityCode()),
    namedtype.OptionalNamedType('recEntityType', RecEntityType()),
    namedtype.OptionalNamedType('recEntityId', RecEntityId())
)


class RecEntityTable(univ.SequenceOf):
    pass


RecEntityTable.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 188))
RecEntityTable.componentType = RecEntityDefinition()


class NetworkInfo(univ.Sequence):
    pass


NetworkInfo.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 6))
NetworkInfo.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('utcTimeOffsetInfo', UtcTimeOffsetInfo()),
    namedtype.OptionalNamedType('recEntityInfo', RecEntityTable()),
    namedtype.OptionalNamedType('networkType', NetworkType()),
    namedtype.OptionalNamedType('calledNumAnalysis', CalledNumAnalysisList())
)


class DateTimeLong(univ.Sequence):
    pass


DateTimeLong.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 84))
DateTimeLong.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('localTimeStamp', LocalTimeStamp()),
    namedtype.OptionalNamedType('utcTimeOffset', UtcTimeOffset())
)


class EarliestCallTimeStamp(DateTimeLong):
    pass


EarliestCallTimeStamp.tagSet = DateTimeLong.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 101))


class ReleaseVersionNumber(univ.Integer):
    pass


ReleaseVersionNumber.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 189))


class TotalDiscountValue(AbsoluteAmount):
    pass


TotalDiscountValue.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 225))


class CallEventDetailsCount(univ.Integer):
    pass


CallEventDetailsCount.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 43))


class LatestCallTimeStamp(DateTimeLong):
    pass


LatestCallTimeStamp.tagSet = DateTimeLong.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 133))


class TotalTaxValue(AbsoluteAmount):
    pass


TotalTaxValue.tagSet = AbsoluteAmount.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 226))


class TotalChargeValue(univ.Sequence):
    pass


TotalChargeValue.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 222))
TotalChargeValue.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('chargeType', ChargeType()),
    namedtype.OptionalNamedType('totalCharge', AbsoluteAmount())
)


class TotalChargeValueList(univ.SequenceOf):
    pass


TotalChargeValueList.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 224))
TotalChargeValueList.componentType = TotalChargeValue()


class AuditControlInfo(univ.Sequence):
    pass


AuditControlInfo.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 15))
AuditControlInfo.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('earliestCallTimeStamp', EarliestCallTimeStamp()),
    namedtype.OptionalNamedType('latestCallTimeStamp', LatestCallTimeStamp()),
    namedtype.OptionalNamedType('totalChargeValueList', TotalChargeValueList()),
    namedtype.OptionalNamedType('totalTaxValue', TotalTaxValue()),
    namedtype.OptionalNamedType('totalDiscountValue', TotalDiscountValue()),
    namedtype.OptionalNamedType('callEventDetailsCount', CallEventDetailsCount()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInformation())
)


class VasInfo(univ.SequenceOf):
    pass


VasInfo.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 7))
VasInfo.componentType = VasDefinition()


class SpecificationVersionNumber(univ.Integer):
    pass


SpecificationVersionNumber.tagSet = univ.Integer.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 201))


class FileCreationTimeStamp(DateTimeLong):
    pass


FileCreationTimeStamp.tagSet = DateTimeLong.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 108))


class Sender(PlmnId):
    pass


Sender.tagSet = PlmnId.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 196))


class Recipient(PlmnId):
    pass


Recipient.tagSet = PlmnId.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 182))


class TransferCutOffTimeStamp(DateTimeLong):
    pass


TransferCutOffTimeStamp.tagSet = DateTimeLong.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 227))


class FileAvailableTimeStamp(DateTimeLong):
    pass


FileAvailableTimeStamp.tagSet = DateTimeLong.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 107))


class Notification(univ.Sequence):
    pass


Notification.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 2))
Notification.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('sender', Sender()),
    namedtype.OptionalNamedType('recipient', Recipient()),
    namedtype.OptionalNamedType('fileSequenceNumber', FileSequenceNumber()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('fileCreationTimeStamp', FileCreationTimeStamp()),
    namedtype.OptionalNamedType('fileAvailableTimeStamp', FileAvailableTimeStamp()),
    namedtype.OptionalNamedType('transferCutOffTimeStamp', TransferCutOffTimeStamp()),
    namedtype.OptionalNamedType('specificationVersionNumber', SpecificationVersionNumber()),
    namedtype.OptionalNamedType('releaseVersionNumber', ReleaseVersionNumber()),
    namedtype.OptionalNamedType('fileTypeIndicator', FileTypeIndicator()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInformation())
)


class MessageDescription(AsciiString):
    pass


MessageDescription.tagSet = AsciiString.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 142))


class MessageDescriptionDefinition(univ.Sequence):
    pass


MessageDescriptionDefinition.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 143))
MessageDescriptionDefinition.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('messageDescriptionCode', MessageDescriptionCode()),
    namedtype.OptionalNamedType('messageDescription', MessageDescription())
)


class MessageDescriptionInfo(univ.SequenceOf):
    pass


MessageDescriptionInfo.tagSet = univ.SequenceOf.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 8))
MessageDescriptionInfo.componentType = MessageDescriptionDefinition()


class BatchControlInfo(univ.Sequence):
    pass


BatchControlInfo.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 4))
BatchControlInfo.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('sender', Sender()),
    namedtype.OptionalNamedType('recipient', Recipient()),
    namedtype.OptionalNamedType('fileSequenceNumber', FileSequenceNumber()),
    namedtype.OptionalNamedType('fileCreationTimeStamp', FileCreationTimeStamp()),
    namedtype.OptionalNamedType('transferCutOffTimeStamp', TransferCutOffTimeStamp()),
    namedtype.OptionalNamedType('fileAvailableTimeStamp', FileAvailableTimeStamp()),
    namedtype.OptionalNamedType('specificationVersionNumber', SpecificationVersionNumber()),
    namedtype.OptionalNamedType('releaseVersionNumber', ReleaseVersionNumber()),
    namedtype.OptionalNamedType('fileTypeIndicator', FileTypeIndicator()),
    namedtype.OptionalNamedType('rapFileSequenceNumber', RapFileSequenceNumber()),
    namedtype.OptionalNamedType('operatorSpecInformation', OperatorSpecInformation())
)


class TransferBatch(univ.Sequence):
    pass


TransferBatch.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 1))
TransferBatch.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('batchControlInfo', BatchControlInfo()),
    namedtype.OptionalNamedType('accountingInfo', AccountingInfo()),
    namedtype.OptionalNamedType('networkInfo', NetworkInfo()),
    namedtype.OptionalNamedType('vasInfo', VasInfo()),
    namedtype.OptionalNamedType('messageDescriptionInfo', MessageDescriptionInfo()),
    namedtype.OptionalNamedType('callEventDetails', CallEventDetailList()),
    namedtype.OptionalNamedType('auditControlInfo', AuditControlInfo())
)


class DataInterChange(univ.Choice):
    pass


DataInterChange.componentType = namedtype.NamedTypes(
    namedtype.NamedType('transferBatch', TransferBatch()),
    namedtype.NamedType('notification', Notification())
)


